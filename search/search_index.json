{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Observing the Sky","text":"<p>This package collects code and pedagogical snippets related to astronomical observations of the sky, particular with ground-based telescopes. It is being assembled in support of the University of Colorado Boulder course \"ASTR3510: Observations and Instrumentation\" starting in Fall 2022.</p> <p>We hope you may find it useful!</p>"},{"location":"contributing/","title":"Contributing Code with GitHub","text":""},{"location":"contributing/#contributing-code-with-github","title":"Contributing Code with GitHub\u00b6","text":"<p>There are oodles of great tutorials on various aspects of contributing to collaborative code projects with GitHub. This page is meant to provide a quick, recipe-like answer to the question \"how do I contribute to the <code>cu-astr3510</code> package?\"</p>"},{"location":"contributing/#should-i-submit-an-issue-to-the-cu-astr3510-github-repository","title":"Should I submit an Issue to the <code>cu-astr3510</code> GitHub repository?\u00b6","text":"<p>Yes! You tried out <code>cu-astr3510</code> and maybe thought it had some neat features, but you encountered something that didn't work quite how you expected it to, a question that you couldn't find an answer to in the documentation, or a feature that you wished existed. Those would all be great motivations to go to the <code>cu-astr3510</code> GitHub repository to submit an Issue!</p> <p>But...we know you! You're saying to yourself \"Oh, gosh, they have their hands full, I don't want to bother them right now. I'm sure I'm the only one having this problem or with this question about how <code>cu-astr3510</code> works. My idea probably matters only to me and not anyone else. I don't want to make more workf for other folks.\" You're wringing your hands and anxiously worrying about about whether to submit an Issue.</p> <p>Still, can we please encourage you share your problem, ask your question, or make your suggestion? Your experience and curiosity and creativity would be extremely valuable contributions to the package, and make it better for everyone. It's super exciting to hear that someone new else trying to use this code package, and every bit of discussion about how to improve it is super helpful. I promise we're very friendly! So, please, hop on over and submit an Issue!</p>"},{"location":"contributing/#how-do-we-get-started-with-git-and-github","title":"How do we get started with <code>git</code> and GitHub?\u00b6","text":"<p>Yay! You're interested in contributing some code to the <code>chromatic</code> package. The first step will be to make sure you have a basic familiarity with <code>git</code> and GitHub as tools for safe and collaborative coding.</p> <p>Christina Hedges has written some great resources on coding-related workflows for astronomy, including a tutorial for getting started with <code>git</code> and GitHub that you can watch here. If you're entirely new to these tools, please work through her tutorial and then come back here. If you haven't created one yet, make yourself a GitHub account so you can start submitting issues and collaborating on code.</p>"},{"location":"contributing/#how-do-we-contribute-new-code","title":"How do we contribute new code?\u00b6","text":"<p>Because we have more than one person working on <code>chromatic</code> code, let's please use separate <code>git</code> branches for developing new features. Using branches allows us to write code in parallel and merge it together later, without constantly having to make sure that everything everybody writes is up-to-date everywhere all at once. We're generally trying to follow something like the Gitflow Workflow, to allow us to make changes to the shared code that are a little bit buffered from the published code used by non-developers.</p> <p>There three branches you should know about, and only two you should probably interact with:</p> <ul> <li>The <code>main</code> branch hosts the published version of the code for public users. New <code>pip</code> versions of the code will be released from the <code>main</code> branch. Most developers should never interact directly with the <code>main</code> branch.</li> <li>The <code>develop</code> branch is the active branch for shared development. New feature branches should be created from the <code>develop</code> branch and once they're reviewed be merged back into <code>develop</code>. Occasionally, and only after careful testing and documentation edits, the <code>develop</code> branch will get merged into the <code>main</code> branch and published to <code>pip</code>.</li> <li>Your <code>add-amazing-awesome-new-feature</code> branch (where you replace the name with something more specific and informative) is a temporary branch that you created off of <code>develop</code> to add your amazing awesome new feature. You should make your changes and commits to that branch, and when you're ready to discuss to your contribution (either as a draft or a mostly finished product), you should submit a Pull Request from this feature branch into the <code>develop</code> branch. Features should be tested well enough that they won't break <code>develop</code> when they get merged into it (but if they do, possibly due to a temporary conflict with another feature branch, it's OK because the <code>main</code> branch is still safe). Once it's merged, your feature branch will be deleted, and you can start a new one to add a different new feature.</li> </ul> <p>With these branches, here's what writing some new code for <code>chromatic</code> might look like for you. The following describes using <code>git</code> from the Terminal prompt. In practice, you might interact with <code>git</code> mostly through atom, GitHub Desktop, or some other tool.</p> <ol> <li>Discuss your plans in an Issue. You might start from trying to address an existing issue, or you might add a new issue of your own. Either way, it's really helpful to let other folks know \"here's what I'm trying to do\" to avoid duplicate or unfocused efforts. If you're not already a Collaborator on the <code>chromatic</code> repository, we can add you at this point!</li> <li>Use the Installation instructions to compelete the Developer Installation. This will download the <code>develop</code> branch of the <code>chromatic</code> repository onto your computer and set up your environment to point to the repository's directory.</li> </ol> <pre><code>git clone https://github.com/zkbt/chromatic.git\ncd chromatic\npip install -e '.[develop]'\n</code></pre> <ol> <li>Create a new feature branch off of <code>develop</code>. Check out that branch, so that all commits you make will be associated with that branch.</li> </ol> <pre><code>git checkout develop\ngit branch add-amazing-awesome-new-feature\ngit checkout add-amazing-awesome-new-feature\n</code></pre> <ol> <li>Write your code. Follow some of the tips for Designing New \ud83c\udf08 Features to get started, to make sure it imports correctly, and to write some useful tests. Once you've saved some changes to the code, commit those changes to your feature branch. (You can confirm you're on your feature branch by running <code>git branch</code> and seeing which branch has the <code>*</code>.)</li> </ol> <pre><code>git add .\ngit commit -m \"{include informative commit message here}\"\n</code></pre> <p>Up to this point, whatever changes you have committed are still only stored on your computer.</p> <ol> <li>To start sharing your new code, push your branch up to GitHub. The first time you run this push command, you'll probably get some instructions about how to link your local branch to a new remote one that you're about to create; follow them.</li> </ol> <pre><code>git push\n</code></pre> <p>Now your branch and most recently pushed commits should appear in the GitHub list of branches.</p> <ol> <li>To ask for your code to be reviewed, either because you think it's finished or because you've completed enough of a draft to be useful to start discussing, submit a Pull Request asking us to pull the code from your feature branch into <code>develop</code>. We'll probably discuss a few aspects of it and suggest some changes, which can be implemented by continuing to push new commits to your feature branch as long as the Pull Request is still open. Once it's tested and works and we're all happy with it, we'll merge the code into <code>develop</code>, from where it will eventually then be merged into the <code>main</code> branch and released in the latest <code>pip</code> version.</li> <li>\ud83c\udf08\ud83c\udf89\ud83e\udd29 Celebrate!</li> </ol>"},{"location":"contributing/#what-kinds-of-files-should-we-commit","title":"What kinds of files should we commit?\u00b6","text":"<p>Every file change commit to the repository will be stored and able to be recovered in the future. That's great for being able to go back to previous versions in the code's history, but it means that the repository could very easily get very big if we include lots of large files in our commits. Large files are extra troublesome if they change frequently, because then we're storing a new copy of every large file in our repository.</p> <p>Let's try to keep the <code>chromatic</code> repository relatively slim. To do that, please:</p> <ul> <li>Avoid committing large data, image, or movie files to the repository. If you think you need to include a large file (anything over ~1 MB), raise an Issue to discuss your plans. There might be a better alternative.</li> <li>Avoid committing scratch jupyter notebook files where you're testing out new code. The only notebooks that should be committed to <code>chromatic</code> are ones meant to serve as public documentation; those should be stored in the <code>docs/</code> folder as described in Writing \ud83c\udf08 Documentation and their outputs should be cleared before saving.</li> </ul>"},{"location":"contributing/#wait-i-have-a-question-thats-not-answered-here","title":"Wait, I have a question that's not answered here!\u00b6","text":"<p>This page is a whirlwind tour! We probably missed lots of important information. If you have a question, no matter how small or large or seemingly basic, please ask Zach or submit an Issue.</p>"},{"location":"gaia/","title":"\ud83c\udf0e\ud83d\udd6f\ud83d\uddfa Gaia Data","text":"In\u00a0[1]: Copied! <pre>from astropy.coordinates import SkyCoord\nimport astropy.units as u\nfrom astr3510 import get_gaia\n</pre> from astropy.coordinates import SkyCoord import astropy.units as u from astr3510 import get_gaia <p>To download some stars, specify a center and a radius, and let the function download data within that radius of that location. This will both download the star magnitudes directly measured with Gaia (<code>G_gaia</code>, <code>BP_gaia</code>, <code>RP_gaia</code>) and use color transformations to estimate the magnitudes in other common filters (<code>g_sloan</code>, <code>r_sloan</code>, <code>i_sloan</code>, <code>V_johnsoncousins</code>, <code>R_johnsoncousins</code>, <code>I_johnsoncousins</code>). With the results, you should have a decent estimate of the brightness of any star you want!</p> In\u00a0[2]: Copied! <pre>random_center = SkyCoord(ra=123.45*u.deg, dec=67.89*u.deg)\nrandom_radius = 10*u.arcmin\nrandom_stars = get_gaia(random_center, radius=random_radius)\n</pre> random_center = SkyCoord(ra=123.45*u.deg, dec=67.89*u.deg) random_radius = 10*u.arcmin random_stars = get_gaia(random_center, radius=random_radius) <pre>INFO: Query finished. [astroquery.utils.tap.core]\n</pre> In\u00a0[3]: Copied! <pre>random_stars\n</pre> random_stars Out[3]: QTable length=511 source_idradecG_gaia_magRP_gaia_magBP_gaia_magparallaxparallax_errorpmrapmra_errorpmdecpmdec_errordistance_from_centerr_sloan_magi_sloan_magg_sloan_magV_johnsoncousins_magR_johnsoncousins_magI_johnsoncousins_mag degdegmagmagmagmasmasmas / yrmas / yrmas / yrmas / yrdegmagmagmagmagmagmag int64float64float64float32float32float32float64float32float64float32float64float32float64float32float32float32float32float32float32 1096857033044992512123.4635893883863167.8897168201593120.22624778747558618.945795059204121.2798500061035162.46121394362673660.5596178770065308-1.51099444657627660.3861945867538452-0.99935816767491350.6462771296501160.00512086823937105920.5580043792724619.5646839141845722.270257949829121.20342063903808620.06756210327148418.998441696166992 1096857101765237760123.4389234304876967.895612454717521.29558181762695320.32052421569824221.499958038330078\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u20140.006996908781553126521.25285911560058620.96998596191406222.0209484100341821.56220436096191421.03382873535156220.53368377685547 1096856994390017152123.4564564126397167.8812577571630119.70782852172851618.3832263946533220.9798545837402343.05738024673824650.317930877208709711.8805332011889760.22325950860977173-7.3936758770387890.304888933897018430.0090676374498482220.24743270874023419.00759696960449222.0968360900878920.91103935241699219.62263107299804718.409908294677734 1096857067406032640123.4192933407016667.8917808319682316.63445663452148415.8524408340454117.3143138885498051.20509086728501050.048259854316711426-5.5679793261506910.03303448110818863-12.0774435103386550.047709994018077850.01169593737932267616.61594772338867216.20169639587402317.6465454101562517.032226562516.36478233337402315.734864234924316 1096858510515041408123.4757747778862667.8970084601579819.7828845977783218.7714233398437520.7744522094726560.9760725985193470.3294190466403961-0.66700593272898990.23502284288406372-5.0617867424547240.314647465944290160.01196910051884692219.92539787292480519.18999290466308621.41232872009277320.50912475585937519.55797958374023418.662395477294922 1096857754600039168123.4999972011005867.8890812859944220.95503997802734419.9273948669433621.314929962158203\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u20140.01883921490754779420.9266490936279320.5489158630371121.88910102844238321.3156127929687520.6853694915771520.090198516845703 1096858574938003200123.4678349064705467.9093604469047718.4564342498779317.44145202636718819.5562381744384771.10802679062640990.14231024682521826.3028114851229270.096838243305683142.38756809801725960.145342290401458740.02049544702774200718.65434265136718817.83787345886230520.22304534912109419.26314735412597718.2505893707275417.297353744506836 1096858574938005888123.4362340155761867.9123325610812114.92424678802490214.47485542297363315.2066574096679690.62350006074441910.021513553336262703-2.5988149952007610.015005433931946754-0.88776720112049920.0210257787257432940.02293136961316625714.9066534042358414.80163478851318415.25392150878906215.03962135314941414.71900272369384814.412050247192383 1096856277132046976123.4940523967289767.8732961505354719.94822311401367219.45656013488769520.213371276855470.83011770830961520.37824314832687380.6609149158221670.2582669258117676-3.2186123813237390.349050760269165040.0235347499676011719.92753982543945319.8131980895996120.2979469299316420.0702171325683619.73839950561523419.421058654785156 ......................................................... 1096861774690195200123.1497532684977968.0112308835022616.91623497009277316.28219795227050817.3278770446777340.20788157368998610.058080703020095825-2.8083861181753980.04185868799686432-3.62600152319071970.05446564778685570.1655389034640656616.87372779846191416.6470336914062517.5154495239257817.1303920745849616.66571998596191416.224905014038086 1096761890930958848123.2477643854126867.743001330024114.15274810791015613.55293750762939514.5895099639892582.28585153758815050.015925053507089615-5.55725994478060.010669785551726818-4.790613077188620.0152326105162501340.1656432902178423814.11050128936767613.88751888275146514.74361133575439514.3635597229003913.90317344665527313.466348648071289 1096863149079727360123.25674137285568.0389794869770116.1074962615966815.48519802093505916.57214927673340.205330207595815440.039044383913278581.1177945877121510.028735157102346420.82376063070271060.038480661809444430.1656927936690632516.06419181823730515.82050704956054716.7449474334716816.33718299865722715.8530006408691415.394023895263672 1096861637251242880123.1017038174027667.9919172402555915.04918193817138714.54620265960693415.3808517456054690.78118550574957420.0239902026951313024.127530105523770.016851527616381645-4.7184516427532520.0228925999253988270.1658282978773248415.02002429962158214.87633609771728515.46292304992675815.1931657791137714.8261852264404314.47619915008545 1096765464343757824123.0733467633423367.8041265420643715.18782424926757814.68546009063720715.5190849304199220.68384983947649680.026239233091473583.1944373242226040.01638740487396717-9.6459888624615840.0218917559832334520.165968691097600715.15876674652099615.0154685974121115.60070705413818415.33150482177734414.9649896621704114.615436553955078 1096766800076504192123.009979330451867.8772595208736216.72583389282226616.1986961364746117.0863666534423830.26740472253333260.05140516534447671.14345766731485440.036175955086946490.101674353309085030.0483952723443508150.1661528437590746616.69194602966308616.52792930603027317.1845626831054716.88599777221679716.49479675292968816.1223087310791 1096863144782865152123.2731785173438568.0425205217667820.67244720458984420.02495956420898420.8813991546630866.3296213037116030.9460204243659973-19.1496057945460760.7373940944671631-13.5462775763239791.04261648654937740.1663274681532708720.64123916625976620.48923492431640621.10454368591308620.82296180725097720.44605445861816420.08684730529785 1096761238095922816123.4268531633015767.7238593222645719.92838668823242218.7373600006103520.7585010528564451.6707236914103390.41950082778930664-1.81595425505551680.29341042041778564-6.63695285445146150.413850665092468260.166364656991092220.07931518554687519.3311634063720721.57985687255859420.66737556457519519.70634269714355518.80147933959961 1096749521425137280123.4818286340468367.7240617622617818.0188522338867217.2791137695312518.6897335052490230.5127806257118690.10643969476222992-1.5497661814438480.07013402134180069-1.33525256331274260.105648241937160490.1663670894628496217.99324798583984417.60433769226074218.97695350646972718.39076995849609417.74902153015136717.14310646057129 <p>Columns from this table can be extracted via their names.</p> In\u00a0[4]: Copied! <pre>random_stars['ra']\n</pre> random_stars['ra'] Out[4]:  $[123.46359,~123.43892,~123.45646,~\\dots,~123.27318,~123.42685,~123.48183]\\mathrm{{}^{\\circ}}$  <p>We can also specify the center by using <code>SkyCoord</code>'s ability to look up stars by common names.</p> In\u00a0[5]: Copied! <pre>some_center = SkyCoord.from_name('GJ1214')\nsome_stars = get_gaia(some_center)\n</pre> some_center = SkyCoord.from_name('GJ1214') some_stars = get_gaia(some_center) <pre>INFO: Query finished. [astroquery.utils.tap.core]\n</pre> In\u00a0[6]: Copied! <pre>some_stars\n</pre> some_stars Out[6]: QTable length=875 source_idradecG_gaia_magRP_gaia_magBP_gaia_magparallaxparallax_errorpmrapmra_errorpmdecpmdec_errordistance_from_centerr_sloan_magi_sloan_magg_sloan_magV_johnsoncousins_magR_johnsoncousins_magI_johnsoncousins_mag degdegmagmagmagmasmasmas / yrmas / yrmas / yrmas / yrdegmagmagmagmagmagmag int64float64float64float32float32float32float64float32float64float32float64float32float64float32float32float32float32float32float32 4393265392168829056258.83147998873174.96057533834274312.99678230285644511.6829118728637714.91244029998779368.298647904967040.06518708169460297580.2021523223420.059069931507110596-749.71327875850670.0467145740985870360.00421355358336060414.28170585632324212.26082420349121116.26128768920898414.84298706054687513.16494560241699211.584444046020508 4393265594029572864258.825480590225544.95967341539151519.81459808349609418.740484237670920.92361831665039-0.122019315768440590.42331802845001220.78867723195419780.38949310779571533-5.902164309885260.314400911331176760.00543666336776133720.05056190490722719.1815872192382821.66654205322265620.67265892028808619.62206649780273418.633102416992188 4393265594029578624258.83034534435984.96931879959339118.46703910827636717.84989738464355518.92687988281250.325984005974977450.14732687175273895-2.31710634646336630.13715088367462158-2.80024502715748860.110373973846435550.005595541815421249518.42387008666992218.18431472778320319.09519767761230518.69292068481445318.21346282958984417.75888442993164 4393265594029575936258.83459347581684.96535606742812619.52840614318847718.81796455383300820.0483493804931640.91959191722278790.2980462312698364-0.131051040201664080.29258519411087036-2.7806513797736470.2307530939579010.00585523924556890419.48746871948242219.18228149414062520.30350303649902319.816644668579119.2636375427246118.74053192138672 4393265598326066432258.82601663831574.96922158910412221.04161453247070319.7395229339599622.038986206054688\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\uu2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u20140.0997421634638246519.33018302917480518.1959095001220721.12858963012695319.9900455474853518.76458549499511717.611148834228516 4393269927653385472258.769722581113975.0444098007319615.4571666717529314.87687683105468815.8672704696655270.61211890388343490.03552864491939545-4.41417878680723950.033296313136816025-0.9667072383078750.0251939184963703160.0997741897528864315.4166975021362315.21233558654785216.0061511993408215.65144920349121115.21270275115966814.796011924743652 4393269687132214656258.743309384183765.01603232099432219.4287929534912118.63128471374511720.069423675537110.337991866317628450.31934872269630432.26104598216161130.3499622941017151-6.6558324563595810.26636251807212830.0999320943106757519.40684127807617219.0044155120849620.415777206420919.81447792053222719.15895843505859418.540180206298828 4393269893293365504258.758589527119745.03526519648817121.10805892944336\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u20140.09998460449950151nannannannannannan In\u00a0[7]: Copied! <pre>from astr3510 import plot_gaia\n</pre> from astr3510 import plot_gaia In\u00a0[8]: Copied! <pre>plot_gaia(some_stars)\n</pre> plot_gaia(some_stars) <p>We can change options to modify the appearance of this finder chart, including changing which filter is used to set the relative sizes of the points.</p> In\u00a0[9]: Copied! <pre>plot_gaia(some_stars, \n          filter='i_sloan',\n          faintest_magnitude_to_show=17,\n          faintest_magnitude_to_label=13,\n          size_of_zero_magnitude=200,\n          unit=u.arcsec)\n</pre> plot_gaia(some_stars,            filter='i_sloan',           faintest_magnitude_to_show=17,           faintest_magnitude_to_label=13,           size_of_zero_magnitude=200,           unit=u.arcsec) <p>With these tools, you can access a table of data and a quick visualization for any patch of the sky you care about!</p> In\u00a0[10]: Copied! <pre>cluster_center = SkyCoord.from_name(\"NGC 457\")\ncluster_stars = get_gaia(cluster_center)\nplot_gaia(cluster_stars, faintest_magnitude_to_label=10)\n</pre> cluster_center = SkyCoord.from_name(\"NGC 457\") cluster_stars = get_gaia(cluster_center) plot_gaia(cluster_stars, faintest_magnitude_to_label=10) <pre>INFO: Query finished. [astroquery.utils.tap.core]\n</pre>"},{"location":"gaia/#gaia-data","title":"\ud83c\udf0e\ud83d\udd6f\ud83d\uddfa Gaia Data\u00b6","text":"<p>Often you need to know the magnitude of a star. Fortunately, the space-based Gaia survey has observed the entire sky with incredible precision; basically any star you can see with a moderate ground-based telescope has already been observed by Gaia. Common reasons you might need to download stars from Gaia would be to locate where to put apertures in an image or to use a star you observed as a flux calibrator; this page demonstrates two little tools that might be helpful for those purposes!</p>"},{"location":"gaia/#downloading-gaia-data","title":"Downloading Gaia Data \ud83d\udcbe\u00b6","text":"<p>To get a table of positions and photometry, we can use the <code>get_gaia</code> function. This is a wrapper to <code>astroquery</code> and the fabulous Gaia archive, designed to be quick and easy to use.</p>"},{"location":"gaia/#visualizing-gaia-data","title":"Visualizing Gaia Data \ud83c\udfa8\u00b6","text":"<p>It'd be nice to be able to see this information in a way that's not just a giant table of data. Let's use the <code>plot_gaia</code> tool to plot one of the tables we've already downloaded.</p>"},{"location":"installation/","title":"Installation","text":"In\u00a0[1]: Copied! <pre>import astr3510\n\nastr3510.version()\n</pre> import astr3510  astr3510.version() Out[1]: <pre>'0.1.3'</pre> <p>Happy coding!\ud83e\uddd1\u200d\ud83d\udcbb\ud83c\udf08\ud83c\udfa8\ud83e\udd16</p>"},{"location":"installation/#installation","title":"Installation\u00b6","text":"<p>For installing this code we assume you have a Python environment set up, into which you can install packages via <code>pip</code>. If so, please continue to one of the installation options below.</p> <p>If this isn't the case, we recommend installing the Anaconda Python distribution, and using <code>conda</code> to manage the <code>python</code> environment(s) you have installed on your computer. One tutorial (of many) about how to get started with Python and creating <code>conda</code> environments is available here.</p>"},{"location":"installation/#basic-installation","title":"Basic Installation\u00b6","text":"<p>If you want to install into your current environment, the basic installation should be pretty simple. From the Terminal or Anaconda Prompt, please run</p> <pre><code>pip install cu-astr3510\n</code></pre> <p>and it should install everything, along with all the necessary dependencies.</p> <p>If you previously installed this package and need to grab a newer version, run</p> <pre><code>pip install --upgrade cu-astr3510\n</code></pre> <p>to download any officially released updates.</p>"},{"location":"installation/#basic-installation-in-new-conda-environment","title":"Basic Installation in New <code>conda</code> Environment\u00b6","text":"<p>If you are at all worried about the installation messing up other existing packages on your computer or if you're having trouble getting a tricky dependency to install, please consider installing into a new <code>conda</code> environment. Environments are independent of each other, so what you install into one shouldn't affect others.</p> <p>From the Terminal or Anaconda Prompt, please run</p> <pre><code>conda create -n my-neato-astr3510-environment python=3.10\n</code></pre> <p>to create a new, empty environment centered on a recent-ish version of <code>python</code>. You may want to choose a shorter name for your neato environment, as it's something you'll need to type every time you want to use this environment. Run</p> <pre><code>conda activate my-neato-astr3510-environment\n</code></pre> <p>to enter than environment. You can check that you're in it by running</p> <pre><code>conda env list\n</code></pre> <p>and looking for a little star next to the environment name. Now, from within this environment, run</p> <pre><code>pip install --upgrade cu-astr3510\n</code></pre> <p>to install <code>astr3510</code> and all its dependencies (or follow the Developer Installation instructions immediately below), into this specific environment.</p> <p>One thing to watch out for is that if you haven't installed whatever tools you use to work with <code>python</code> (such as <code>jupyter</code> or <code>spyder</code>) into this environment, you might not be able to open them or you might open them from your base environment without access to <code>astr3510</code>. To fix that, run</p> <pre><code>conda install jupyter spyder\n</code></pre> <p>from inside your environment. From now on, whenever you want to use this environment, activate it with</p> <pre><code>conda activate my-neato-astr3510-environment\n</code></pre> <p>and then open your <code>python</code> interface from within that environment, as with any one of these</p> <pre><code>jupyter notebook \njupyter lab\nspyder \n</code></pre> <p>Good luck!</p>"},{"location":"installation/#developer-installation","title":"Developer Installation\u00b6","text":"<p>If you want to install this code while being able to edit and develop it, you can clone its GitHub repository onto your own computer. This allows you to edit it for your own sake and/or to draft changes that can be contributed to the public package (see Contributing \ud83c\udf08 Code with GitHub).</p> <p>To install directly as an editable package on your local computer, run</p> <pre><code>git clone https://github.com/zkbt/cu-astr3510.git\ncd cu-astr3510\npip install -e '.[develop]'\n</code></pre> <p>The <code>-e .</code> will point your environment's <code>astr3510</code> package to your local folder, meaning that any changes you make in the repository will be reflected in what Python sees when it tries to <code>import astr3510</code>. Including the <code>[develop]</code> after the <code>.</code> will install both the dependencies for the package itself and the extra dependencies required for development (= testing and documentation).</p>"},{"location":"installation/#did-it-work","title":"Did it work?\u00b6","text":"<p>You can quickly test whether your installation worked, and what version you have, by running the Python code</p>"},{"location":"pdf-plots/","title":"Pdf plots","text":"In\u00a0[1]: Copied! <pre>from chromatic import *\nfrom scipy.stats import norm, uniform, poisson\n</pre> from chromatic import * from scipy.stats import norm, uniform, poisson In\u00a0[2]: Copied! <pre>N=5\nmu = np.random.uniform(-2, 2, N)\nsigma = np.random.uniform(0.1, 1, N)\n        \ndef cartoon_pdf(x):\n    p = np.zeros_like(x)\n    for i in range(N):\n        p += norm(loc=mu[i], scale=sigma[i]).pdf(x)/N\n    return p\n        \nfor version in ['f(x)', 'f(x)dx', 'a-b', 'infty']:\n    x = np.linspace(-4,4,1000)\n    plt.figure(figsize=(6, 2), dpi=300)\n    plt.plot(x, cartoon_pdf(x), linewidth=5, color='black', clip_on=False)\n    plt.ylim(0, None)\n    plt.xlim(-4,4)\n    plt.xlabel('x')\n    plt.yticks([])\n    plt.xticks([])\n    ax = plt.gca()\n    for k in ['top', 'right']:\n        ax.spines[k].set_visible(False)\n    plt.ylabel('$f(x)$')\n    \n\n    if version == 'infty':\n        plt.fill_between(x, cartoon_pdf(x), color='silver', zorder=-1)\n    if version == 'a-b':\n        x = np.linspace(-1.5, 0.5)\n        plt.fill_between(x, cartoon_pdf(x), color='silver', zorder=-1)\n    if 'f(x)' in version:\n        x = np.linspace(1.99, 2.01)\n        plt.fill_between(x, cartoon_pdf(x), color='black')\n    if version == 'f(x)dx':\n        x = np.linspace(1.9, 2.1)\n        plt.fill_between(x, cartoon_pdf(x), color='silver', zorder=-1)\n</pre> N=5 mu = np.random.uniform(-2, 2, N) sigma = np.random.uniform(0.1, 1, N)          def cartoon_pdf(x):     p = np.zeros_like(x)     for i in range(N):         p += norm(loc=mu[i], scale=sigma[i]).pdf(x)/N     return p          for version in ['f(x)', 'f(x)dx', 'a-b', 'infty']:     x = np.linspace(-4,4,1000)     plt.figure(figsize=(6, 2), dpi=300)     plt.plot(x, cartoon_pdf(x), linewidth=5, color='black', clip_on=False)     plt.ylim(0, None)     plt.xlim(-4,4)     plt.xlabel('x')     plt.yticks([])     plt.xticks([])     ax = plt.gca()     for k in ['top', 'right']:         ax.spines[k].set_visible(False)     plt.ylabel('$f(x)$')           if version == 'infty':         plt.fill_between(x, cartoon_pdf(x), color='silver', zorder=-1)     if version == 'a-b':         x = np.linspace(-1.5, 0.5)         plt.fill_between(x, cartoon_pdf(x), color='silver', zorder=-1)     if 'f(x)' in version:         x = np.linspace(1.99, 2.01)         plt.fill_between(x, cartoon_pdf(x), color='black')     if version == 'f(x)dx':         x = np.linspace(1.9, 2.1)         plt.fill_between(x, cartoon_pdf(x), color='silver', zorder=-1)            In\u00a0[3]: Copied! <pre>mu = 0\nsigma = 1\nx = np.linspace(-4,4,1000)\nplt.figure(figsize=(8,2.5), dpi=300)\nplt.plot(x, norm(loc=mu, scale=sigma).pdf(x), linewidth=5, color='black', clip_on=False)\nplt.ylim(0, None)\nplt.xlim(-4,4)\nplt.xticks([-1, 0, 1], [r'$\\mu - \\sigma$', r'$\\mu$', r'$\\mu + \\sigma$'])\n\nplt.yticks([])\nax = plt.gca()\nfor k in ['top', 'right']:\n    ax.spines[k].set_visible(False)\n\nplt.ylabel('Probability Density Function');\n</pre> mu = 0 sigma = 1 x = np.linspace(-4,4,1000) plt.figure(figsize=(8,2.5), dpi=300) plt.plot(x, norm(loc=mu, scale=sigma).pdf(x), linewidth=5, color='black', clip_on=False) plt.ylim(0, None) plt.xlim(-4,4) plt.xticks([-1, 0, 1], [r'$\\mu - \\sigma$', r'$\\mu$', r'$\\mu + \\sigma$'])  plt.yticks([]) ax = plt.gca() for k in ['top', 'right']:     ax.spines[k].set_visible(False)  plt.ylabel('Probability Density Function'); In\u00a0[4]: Copied! <pre>a, b = [-2,2]\nx = np.linspace(-4,4,1000)\nplt.figure(figsize=(8,2.5), dpi=300)\nplt.plot(x, uniform(loc=a, scale=(b-a)).pdf(x), linewidth=5, color='black', clip_on=False)\nplt.ylim(0, None)\nplt.xlim(-4,4)\nplt.xticks([-2, 2], [r'$x_{\\rm lower}$', r'$x_{\\rm upper}$'])\n\nplt.yticks([])\nax = plt.gca()\nfor k in ['top', 'right']:\n    ax.spines[k].set_visible(False)\n\nplt.ylabel('Probability Density Function');\n</pre> a, b = [-2,2] x = np.linspace(-4,4,1000) plt.figure(figsize=(8,2.5), dpi=300) plt.plot(x, uniform(loc=a, scale=(b-a)).pdf(x), linewidth=5, color='black', clip_on=False) plt.ylim(0, None) plt.xlim(-4,4) plt.xticks([-2, 2], [r'$x_{\\rm lower}$', r'$x_{\\rm upper}$'])  plt.yticks([]) ax = plt.gca() for k in ['top', 'right']:     ax.spines[k].set_visible(False)  plt.ylabel('Probability Density Function'); In\u00a0[5]: Copied! <pre>x = np.arange(0, 31)\nfor N in [1, 2, 4, 8, 16]:\n    plt.figure(figsize=(8,2.5), dpi=300)\n    plt.plot(x, poisson(mu=N).pmf(x), linewidth=5, color='black', clip_on=False, drawstyle='steps-mid')\n    plt.ylim(0, None)\n    plt.xlim(0, 30)\n    plt.yticks([])\n    ax = plt.gca()\n    for k in ['top', 'right']:\n        ax.spines[k].set_visible(False)\n\n    plt.ylabel('Probability Density Function');\n</pre> x = np.arange(0, 31) for N in [1, 2, 4, 8, 16]:     plt.figure(figsize=(8,2.5), dpi=300)     plt.plot(x, poisson(mu=N).pmf(x), linewidth=5, color='black', clip_on=False, drawstyle='steps-mid')     plt.ylim(0, None)     plt.xlim(0, 30)     plt.yticks([])     ax = plt.gca()     for k in ['top', 'right']:         ax.spines[k].set_visible(False)      plt.ylabel('Probability Density Function'); In\u00a0[6]: Copied! <pre>poisson?\n</pre> poisson? In\u00a0[7]: Copied! <pre>plt.plot?\n</pre> plt.plot? In\u00a0[8]: Copied! <pre>norm(loc=0, scale=1).sf(3)\n</pre> norm(loc=0, scale=1).sf(3) Out[8]: <pre>0.001349898031630093</pre> In\u00a0[9]: Copied! <pre>x = np.random.normal(0, 1, 1000000)\nplt.hist(x);\n</pre> x = np.random.normal(0, 1, 1000000) plt.hist(x); In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"basics/color-images/","title":"\ud83c\udfa8\ud83c\udf08\ud83c\udfde Crafting Color Images","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\n</pre> import matplotlib.pyplot as plt import numpy as np <p>Many of us are probably familiar with lots of different color image formats, including <code>.jpg</code>, <code>.png</code>, <code>.gif</code>, <code>.tif</code>, and other. Whereas a single FITS image extension will usually have one brightness value per pixel, these color images store three brightness values per pixel, one each for red, green, blue.</p> <p>We can read these image files into arrays providing the <code>plt.imread</code> function with the file path to an image. Please copy the file <code>/home/zkbt/astr3510/rainbow.jpg</code> into the same directory as your notebook, and then run this code. This function uses the Python Imaging Library (<code>PIL.Image.open</code>), so if you need more control over loading images you should work with that directly.</p> In\u00a0[2]: Copied! <pre>rainbow = plt.imread('rainbow.jpg')\n</pre> rainbow = plt.imread('rainbow.jpg') <p>The variable <code>rgb</code> is now a three-dimensional array, with the first dimension corresponding to pixel row, the second to pixel column, and the third to wavelength band. This image has 1434 rows, 1764 columns, and 3 color bands (red, green, blue).</p> In\u00a0[3]: Copied! <pre>rainbow.shape\n</pre> rainbow.shape Out[3]: <pre>(1434, 1764, 3)</pre> <p>If our trusty friend <code>plt.imshow</code> receives a three-dimensional array with 3 elements in the third dimension, it will try to interpret the array as a color image and display it as such.</p> In\u00a0[4]: Copied! <pre>plt.figure(dpi=300)\nplt.imshow(rainbow);\n</pre> plt.figure(dpi=300) plt.imshow(rainbow); <p>This magic trick of treating a 3D array as a color image will work as long as the values in the image are integer numbers between 0 and 255 ($= 2^8 - 1$ for 8-bit color), or floating point numbers between 0.0 and 1.0. Let's look at the RGB values for the first row and first column of our image:</p> In\u00a0[5]: Copied! <pre>rainbow[0,0,:]\n</pre> rainbow[0,0,:] Out[5]: <pre>array([184, 183, 118], dtype=uint8)</pre> <p>The data type of the numbers is \"unsigned 8-bit integer\", meaning whole numbers between 0 and 255. The RGB values for the first row and first pixel are R=184, G=183, B=118, where 0 means no light of that color and 255 means the brightest possible light for that color. If the three values were all the same, the color would be some shade of gray; since there's a little less blue, the color should be shifted a little toward orange-ish. To my eye, the upper left region looks like a warm gray!</p> In\u00a0[6]: Copied! <pre>def show_rgb_separately(some_rgb_image, cmap='gray'):\n    '''\n    This function provides a handy way to look at the \n    individual RGB channels of a color image.\n    \n    Parameters\n    ----------\n    some_rgb_image : the color image array to display\n        An array with dimensions (rows, columns, 3), with the\n        last dimension corresponding to the three RGB colors.\n    \n    cmap : str\n        Which matplotlib colormap should we use for displaying brightness?\n        (default = 'gray', with black at bottom and white at top)\n    '''\n    \n    # give names to the colors to use as titles\n    colors = ['red', 'green', 'blue']\n    \n    # check if the units are integer (0-255) or not (0.0-1.0)\n    if some_rgb_image.dtype == np.uint8:\n        vmax = 255\n    else:\n        vmax = 1.0\n    \n    # set up big figure to fill with plots\n    fi = plt.figure(figsize=(12,12), dpi=300)\n\n    # set up a grid of panels into which we can plot\n    grid = plt.GridSpec(2, 3, height_ratios=[1, 3])\n    \n    # loop through the three color channels\n    for i in range(3):\n        \n        # point toward the panel in row 0, column i\n        plt.subplot(grid[0,i])\n\n        # show the image for this color channel in this panel\n        plt.imshow(some_rgb_image[:,:,i], cmap=cmap, vmin=0, vmax=vmax)\n\n        # add a title to the panel\n        plt.title(colors[i])\n    \n    # point toward row 1, all columns\n    plt.subplot(grid[1,:])\n    \n    # show the color image\n    plt.imshow(some_rgb_image)\n</pre> def show_rgb_separately(some_rgb_image, cmap='gray'):     '''     This function provides a handy way to look at the      individual RGB channels of a color image.          Parameters     ----------     some_rgb_image : the color image array to display         An array with dimensions (rows, columns, 3), with the         last dimension corresponding to the three RGB colors.          cmap : str         Which matplotlib colormap should we use for displaying brightness?         (default = 'gray', with black at bottom and white at top)     '''          # give names to the colors to use as titles     colors = ['red', 'green', 'blue']          # check if the units are integer (0-255) or not (0.0-1.0)     if some_rgb_image.dtype == np.uint8:         vmax = 255     else:         vmax = 1.0          # set up big figure to fill with plots     fi = plt.figure(figsize=(12,12), dpi=300)      # set up a grid of panels into which we can plot     grid = plt.GridSpec(2, 3, height_ratios=[1, 3])          # loop through the three color channels     for i in range(3):                  # point toward the panel in row 0, column i         plt.subplot(grid[0,i])          # show the image for this color channel in this panel         plt.imshow(some_rgb_image[:,:,i], cmap=cmap, vmin=0, vmax=vmax)          # add a title to the panel         plt.title(colors[i])          # point toward row 1, all columns     plt.subplot(grid[1,:])          # show the color image     plt.imshow(some_rgb_image) <p>Now let's try out our function on our color image.</p> In\u00a0[7]: Copied! <pre>show_rgb_separately(rainbow)\n</pre> show_rgb_separately(rainbow) In\u00a0[8]: Copied! <pre># set up the basic shape of the image \nrows = 10\ncolumns = 12\nshape = (rows, columns)\n\n# define some x and y coordinates along the image\nx = np.linspace(0, 255, columns)\ny = np.linspace(0, 255, rows)\n\n# define 2D arrays that increase along columns and rows\na, b = np.meshgrid(x, y)\n\n# define another 2D full of random numbers\nc = np.random.uniform(50, 200, shape)\n</pre> # set up the basic shape of the image  rows = 10 columns = 12 shape = (rows, columns)  # define some x and y coordinates along the image x = np.linspace(0, 255, columns) y = np.linspace(0, 255, rows)  # define 2D arrays that increase along columns and rows a, b = np.meshgrid(x, y)  # define another 2D full of random numbers c = np.random.uniform(50, 200, shape) <p>Next, let's stitch these three 2D arrays into one 3D array that can be interpreted as a color image. There are multiple way to do this, but here we create an empty array with the correct 3D shape, and then populate it color by color.</p> In\u00a0[9]: Copied! <pre># define the appropriate 3D array shape\nrgb_shape = (rows, columns, 3)\n\n# create a new empty array with that shape\nrgb = np.zeros(rgb_shape)\n\n# populate the color channels one by one\nrgb[:,:,0] = a\nrgb[:,:,1] = b\nrgb[:,:,2] = c\n</pre> # define the appropriate 3D array shape rgb_shape = (rows, columns, 3)  # create a new empty array with that shape rgb = np.zeros(rgb_shape)  # populate the color channels one by one rgb[:,:,0] = a rgb[:,:,1] = b rgb[:,:,2] = c <p>Finally, let's display our new image as a color image. We'll use our <code>show_rgb_separately</code> function above so we can see both the individual color frames and the synthesized color image.</p> In\u00a0[10]: Copied! <pre>show_rgb_separately(rgb)\n</pre> show_rgb_separately(rgb) <pre>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n</pre> <p>Blerg! That color image isn't particularly interesting, and python raises a warning that the input data are being clipped to a range of either 0.0-1.0 for floats (= decimal numbers) or 0-255 for integers (= whole numbers). Indeed, if we print the pixel values below, we see they have decimal numbers that are much higher than 1.0; that means only the very few pixels that have values between 0.0-1.0 are showing up as interesting colors, and the rest are being clipped to the maximum brightness in all channels (= white).</p> In\u00a0[11]: Copied! <pre>rgb\n</pre> rgb Out[11]: <pre>array([[[  0.        ,   0.        , 174.75214878],\n        [ 23.18181818,   0.        , 181.99998514],\n        [ 46.36363636,   0.        , 197.5007764 ],\n        [ 69.54545455,   0.        , 140.5881097 ],\n        [ 92.72727273,   0.        , 112.14307265],\n        [115.90909091,   0.        , 150.49757757],\n        [139.09090909,   0.        , 113.13372147],\n        [162.27272727,   0.        ,  99.83879626],\n        [185.45454545,   0.        , 161.0295156 ],\n        [208.63636364,   0.        ,  65.58235037],\n        [231.81818182,   0.        , 109.68720388],\n        [255.        ,   0.        , 115.95909997]],\n\n       [[  0.        ,  28.33333333,  57.19318136],\n        [ 23.18181818,  28.33333333, 108.43003745],\n        [ 46.36363636,  28.33333333,  87.56483186],\n        [ 69.54545455,  28.33333333, 105.53487432],\n        [ 92.72727273,  28.33333333,  68.28514143],\n        [115.90909091,  28.33333333,  76.36782942],\n        [139.09090909,  28.33333333, 162.41992867],\n        [162.27272727,  28.33333333,  86.00821996],\n        [185.45454545,  28.33333333, 134.76299024],\n        [208.63636364,  28.33333333,  96.14823536],\n        [231.81818182,  28.33333333,  70.62033695],\n        [255.        ,  28.33333333,  96.7041837 ]],\n\n       [[  0.        ,  56.66666667, 192.18889462],\n        [ 23.18181818,  56.66666667, 165.48956742],\n        [ 46.36363636,  56.66666667,  77.06518666],\n        [ 69.54545455,  56.66666667, 135.47765205],\n        [ 92.72727273,  56.66666667,  80.58847562],\n        [115.90909091,  56.66666667, 198.42343486],\n        [139.09090909,  56.66666667, 115.97593241],\n        [162.27272727,  56.66666667, 109.46172439],\n        [185.45454545,  56.66666667, 170.05402383],\n        [208.63636364,  56.66666667, 177.52449212],\n        [231.81818182,  56.66666667,  73.84230202],\n        [255.        ,  56.66666667,  81.6893684 ]],\n\n       [[  0.        ,  85.        , 141.56044515],\n        [ 23.18181818,  85.        ,  92.96519207],\n        [ 46.36363636,  85.        , 165.65704579],\n        [ 69.54545455,  85.        , 121.25109312],\n        [ 92.72727273,  85.        ,  89.85794539],\n        [115.90909091,  85.        , 120.43268678],\n        [139.09090909,  85.        ,  95.6301101 ],\n        [162.27272727,  85.        , 106.8858261 ],\n        [185.45454545,  85.        , 169.55696494],\n        [208.63636364,  85.        , 198.23205628],\n        [231.81818182,  85.        , 104.75861189],\n        [255.        ,  85.        , 152.14033867]],\n\n       [[  0.        , 113.33333333, 163.88777621],\n        [ 23.18181818, 113.33333333,  94.20990203],\n        [ 46.36363636, 113.33333333,  58.41802361],\n        [ 69.54545455, 113.33333333, 191.42936257],\n        [ 92.72727273, 113.33333333,  94.77323774],\n        [115.90909091, 113.33333333, 162.42590011],\n        [139.09090909, 113.33333333,  57.78414201],\n        [162.27272727, 113.33333333, 175.27991141],\n        [185.45454545, 113.33333333, 134.35321238],\n        [208.63636364, 113.33333333, 184.25135763],\n        [231.81818182, 113.33333333, 189.7704006 ],\n        [255.        , 113.33333333, 182.83251524]],\n\n       [[  0.        , 141.66666667,  94.57316554],\n        [ 23.18181818, 141.66666667,  51.55346228],\n        [ 46.36363636, 141.66666667,  94.4879391 ],\n        [ 69.54545455, 141.66666667, 194.78726812],\n        [ 92.72727273, 141.66666667, 119.6831669 ],\n        [115.90909091, 141.66666667, 120.01786413],\n        [139.09090909, 141.66666667,  68.63747014],\n        [162.27272727, 141.66666667,  88.2528753 ],\n        [185.45454545, 141.66666667, 110.16471644],\n        [208.63636364, 141.66666667, 115.87833357],\n        [231.81818182, 141.66666667,  92.4114163 ],\n        [255.        , 141.66666667, 177.61732489]],\n\n       [[  0.        , 170.        , 131.36656679],\n        [ 23.18181818, 170.        , 123.3827505 ],\n        [ 46.36363636, 170.        ,  87.25560459],\n        [ 69.54545455, 170.        ,  97.83239578],\n        [ 92.72727273, 170.        , 141.98823829],\n        [115.90909091, 170.        , 167.35172479],\n        [139.09090909, 170.        , 101.09309465],\n        [162.27272727, 170.        , 153.93041241],\n        [185.45454545, 170.        , 169.82177343],\n        [208.63636364, 170.        , 136.26497813],\n        [231.81818182, 170.        , 133.31251407],\n        [255.        , 170.        , 133.86949981]],\n\n       [[  0.        , 198.33333333, 187.57174742],\n        [ 23.18181818, 198.33333333, 122.67558659],\n        [ 46.36363636, 198.33333333,  69.91531813],\n        [ 69.54545455, 198.33333333, 121.01193801],\n        [ 92.72727273, 198.33333333, 150.93479627],\n        [115.90909091, 198.33333333, 137.71702555],\n        [139.09090909, 198.33333333,  99.54141183],\n        [162.27272727, 198.33333333, 144.67216281],\n        [185.45454545, 198.33333333, 178.46931853],\n        [208.63636364, 198.33333333, 180.27698773],\n        [231.81818182, 198.33333333, 152.06491142],\n        [255.        , 198.33333333, 173.5266318 ]],\n\n       [[  0.        , 226.66666667, 156.21247814],\n        [ 23.18181818, 226.66666667, 123.53436293],\n        [ 46.36363636, 226.66666667, 121.26171005],\n        [ 69.54545455, 226.66666667,  98.10639053],\n        [ 92.72727273, 226.66666667,  91.90334919],\n        [115.90909091, 226.66666667, 108.6424047 ],\n        [139.09090909, 226.66666667,  91.84131178],\n        [162.27272727, 226.66666667, 124.14421057],\n        [185.45454545, 226.66666667, 190.2199428 ],\n        [208.63636364, 226.66666667,  73.49664928],\n        [231.81818182, 226.66666667, 109.21667161],\n        [255.        , 226.66666667, 101.13975044]],\n\n       [[  0.        , 255.        ,  97.55422427],\n        [ 23.18181818, 255.        , 169.35681788],\n        [ 46.36363636, 255.        ,  95.6239975 ],\n        [ 69.54545455, 255.        , 147.85325947],\n        [ 92.72727273, 255.        ,  54.47186502],\n        [115.90909091, 255.        ,  96.62364535],\n        [139.09090909, 255.        , 134.73194149],\n        [162.27272727, 255.        , 117.28432977],\n        [185.45454545, 255.        , 154.0027237 ],\n        [208.63636364, 255.        ,  59.06396007],\n        [231.81818182, 255.        , 131.19504956],\n        [255.        , 255.        ,  87.67834375]]])</pre> <p>One solution to this problem is to normalize the values so that they all fall between 0.0 and 1.0. Here we're doing a linear normalization set by the maximum value in the image, but any transformation that produces values between 0.0 and 1.0 would work.</p> In\u00a0[12]: Copied! <pre>normalized_rgb = rgb/np.max(rgb)\nshow_rgb_separately(normalized_rgb)\n</pre> normalized_rgb = rgb/np.max(rgb) show_rgb_separately(normalized_rgb) <p>Another solution would be to convert the numbers into integers between 0 and 255. This highlights that <code>.imread</code> + <code>.imshow</code> allow only 256 levels of brightness to be associated with each color channel.</p> In\u00a0[13]: Copied! <pre>rgb_as_integers = rgb.astype(np.uint8)\nshow_rgb_separately(rgb_as_integers)\n</pre> rgb_as_integers = rgb.astype(np.uint8) show_rgb_separately(rgb_as_integers) In\u00a0[14]: Copied! <pre>show_rgb_separately(normalized_rgb)\nplt.savefig('my-snazzy-image.pdf')\n</pre> show_rgb_separately(normalized_rgb) plt.savefig('my-snazzy-image.pdf') <p>If all we want is the image, we can use the <code>.imsave</code> function, which will do similar things as <code>.imshow</code> but save directly to a file.</p> In\u00a0[15]: Copied! <pre>plt.imsave('my-snazzy-image.jpg', normalized_rgb)\n</pre> plt.imsave('my-snazzy-image.jpg', normalized_rgb) In\u00a0[16]: Copied! <pre>plt.imsave('my-snazzy-image.png', normalized_rgb)\n</pre> plt.imsave('my-snazzy-image.png', normalized_rgb)"},{"location":"basics/color-images/#crafting-color-images","title":"\ud83c\udfa8\ud83c\udf08\ud83c\udfde Crafting Color Images\u00b6","text":"<p>This page demonstrates how to load RGB color images into a three-dimensional array in Python, how to think about the numbers in that array, and how to construct a color image from three different two-dimensional images. Please work through these examples, discuss with your classmates or instructors, and try the activities on your own.</p>"},{"location":"basics/color-images/#how-we-load-a-color-image-into-an-array","title":"How we load a color image into an array?\u00b6","text":""},{"location":"basics/color-images/#discuss","title":"<code>Discuss!</code>\u00b6","text":"<p>Talk to someone:</p> <ul> <li>Pick at least one pixel in the color image, guess what its RGB pixel brighness values will be, then print out the values to compare. If you can't see some colors, ask your partner(s) to point out what's what.</li> </ul>"},{"location":"basics/color-images/#what-do-the-individual-color-channel-arrays-look-like","title":"What do the individual color channel arrays look like?\u00b6","text":"<p>Let's dig into the details of this image a little more. Since we might want to similar actions for a few different images, let's write a function that we can resuse. (The code of this function is available in <code>/home/zkbt/astr3510/rgb.py</code>, if you just want to copy and paste it from there.)</p>"},{"location":"basics/color-images/#discuss","title":"<code>Discuss!</code>\u00b6","text":"<p>Talk to someone:</p> <ul> <li>What is the relationship between the monochrome RGB images and the color image? Pick a region and explain why it has the color it does.</li> </ul>"},{"location":"basics/color-images/#how-do-we-construct-color-images-from-individual-2d-arrays","title":"How do we construct color images from individual 2D arrays?\u00b6","text":"<p>With telescopes, we're often gathering one 2D brightness image at a time. With filters we can select specific wavelengths to make it to the detector, but the data are being recorded as a monochromatic brightness per pixel. To simulate these kinds of images, let's start by making a few imaginary 2D arrays.</p>"},{"location":"basics/color-images/#discuss","title":"<code>Discuss!</code>\u00b6","text":"<p>Talk to someone:</p> <ul> <li>How would we produce an image where all the color brightnesses are fainter by a factor of 2? Try it out!</li> <li>How do 3D arrays work? How is pointing to values in them similar to or different from 2D arrays?</li> </ul>"},{"location":"basics/color-images/#how-do-we-save-color-images-to-files","title":"How do we save color images to files?\u00b6","text":"<p>If we want to save the outputs of our <code>imshow</code> figures, including labels, titles, multiple panels, or other plot elements, we can use the <code>savefig</code> command to save the entire contents of the figure to a file.</p>"},{"location":"basics/color-images/#how-can-you-apply-this-yourself","title":"How can you apply this yourself?\u00b6","text":"<p>With the skills we've explored above, please discuss with your friends and try to do the following:</p> <ol> <li>Try to load a different color image into an array.</li> <li>Make and show a grayscale image where each pixel is the average of its three RGB values.</li> <li>Mess with the colors of an image by swapping which array corresponds to which color.</li> <li>Draw a colorful horizontal line across an image by changing some pixel values in that row.</li> </ol> <p>Colors are confusing and arrays are confusing, so please please for help when you need it!</p>"},{"location":"basics/fits-files/","title":"\ud83c\udf03\ud83c\udf05\ud83c\udf0c Loading FITS Images","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\n</pre> import matplotlib.pyplot as plt import numpy as np <p>Now, let's create a small array of numbers and store it as a variable named <code>some_array</code>. This will generate a 3x5 array with random values ranging from 0 to 100.</p> In\u00a0[2]: Copied! <pre>some_array = np.random.randint(0, 100, [3,5])\n</pre> some_array = np.random.randint(0, 100, [3,5]) <p>Let's print the numbers in that array.</p> In\u00a0[3]: Copied! <pre>print(some_array)\n</pre> print(some_array) <pre>[[93 36 61 98 73]\n [45 89 86 86 88]\n [98 24 91  5 66]]\n</pre> <p>We can think of this array as a tiny image, so let's show it as an image. Check visually, do the bright pixels in the image correspond to high values in the array?</p> In\u00a0[4]: Copied! <pre>plt.imshow(some_array);\n</pre> plt.imshow(some_array); <p>We can see the shape of the array by looking at its <code>.shape</code> attribute.</p> In\u00a0[5]: Copied! <pre>some_array.shape\n</pre> some_array.shape Out[5]: <pre>(3, 5)</pre> <p>We can access a subset of a 2D array by indexing it with <code>[row, column]</code> where <code>row</code> and <code>column</code> refer to one or more rows or columns of the array. To extract a single row and a single column (= one pixel), just enter one integer for each. In Python, row and column indices start from <code>0</code>, so the 1st row and 1st column would be:</p> In\u00a0[6]: Copied! <pre>some_array[0,0]\n</pre> some_array[0,0] Out[6]: <pre>93</pre> <p>The 3rd row and 2th column would be:</p> In\u00a0[7]: Copied! <pre>some_array[2,1]\n</pre> some_array[2,1] Out[7]: <pre>24</pre> <p>The special character <code>:</code> means \"extract all possible values.\" We can use this to extract 1D arrays along a particular row or column. The entirety of the 1st row (row <code>0</code>, all columns) would be:</p> In\u00a0[8]: Copied! <pre>some_array[0,:]\n</pre> some_array[0,:] Out[8]: <pre>array([93, 36, 61, 98, 73])</pre> <p>The entirety of the 4th column (all rows, column <code>3</code>) would be:</p> In\u00a0[9]: Copied! <pre>some_array[:,3]\n</pre> some_array[:,3] Out[9]: <pre>array([98, 86,  5])</pre> <p>We can plot one of these 1D arrays to see the pixel values a bit more quantitatively.</p> In\u00a0[10]: Copied! <pre># extract the row we want\nthe_row_i_want_to_plot = some_array[0,:]\n\n# plot that data and add labels\nplt.plot(the_row_i_want_to_plot, marker='o')\nplt.xlabel('column (pixels)')\nplt.ylabel('pixel value');\n</pre> # extract the row we want the_row_i_want_to_plot = some_array[0,:]  # plot that data and add labels plt.plot(the_row_i_want_to_plot, marker='o') plt.xlabel('column (pixels)') plt.ylabel('pixel value'); <p>We can calculate summary statistics on our array, such as the minimum and maximum value, with a variety of <code>np.</code> functions.</p> In\u00a0[11]: Copied! <pre>np.min(some_array)\n</pre> np.min(some_array) Out[11]: <pre>5</pre> In\u00a0[12]: Copied! <pre>np.max(some_array)\n</pre> np.max(some_array) Out[12]: <pre>98</pre> <p>And finally, we can do math with arrays, including either individual numbers or other arrays.</p> In\u00a0[13]: Copied! <pre>another_array = some_array + 10000\nprint(another_array)\n</pre> another_array = some_array + 10000 print(another_array) <pre>[[10093 10036 10061 10098 10073]\n [10045 10089 10086 10086 10088]\n [10098 10024 10091 10005 10066]]\n</pre> In\u00a0[14]: Copied! <pre>from astropy.io import fits\n</pre> from astropy.io import fits <p>And then use that tool to open our image into a Python variable. Here, you'll want to use the filename of the file you want to open (which must be in the same directory as your notebook).</p> In\u00a0[15]: Copied! <pre>our_file = fits.open('some-test-image.fit')\n</pre> our_file = fits.open('some-test-image.fit') <p>Once that file is loaded into the variable <code>our_file</code>, we can preview its contents with the <code>.info()</code> method.</p> In\u00a0[16]: Copied! <pre>our_file.info()\n</pre> our_file.info() <pre>Filename: some-test-image.fit\nNo.    Name      Ver    Type      Cards   Dimensions   Format\n  0  PRIMARY       1 PrimaryHDU      50   (2048, 2048)   int16 (rescales to uint16)   \n</pre> <p>Some FITS files can have multiple \"extensions\" which can each hold separate data. The files from the SBO telescopes have only one extension. Let's extract the image data from that 1st extension, and store it in the variable <code>our_image</code>.</p> In\u00a0[17]: Copied! <pre>our_image = our_file[0].data\n</pre> our_image = our_file[0].data <p>That's it! The variable <code>our_image</code> now contains our image data as an array. It's a bit bigger than the tiny array we made above, but exactly the same principles apply. Let's print out the values (thankfully, notice Python abbreviates and only shows us some of the pixels), and display it as an image.</p> In\u00a0[18]: Copied! <pre>print(our_image)\n</pre> print(our_image) <pre>[[3216 3234 3244 ... 3046 3148 2406]\n [3119 3179 3058 ... 3045 3084 2392]\n [3097 3065 2974 ... 3061 3072 2359]\n ...\n [2967 2998 2915 ... 3024 3107 2426]\n [2943 2917 2918 ... 3008 3224 2451]\n [2978 2970 2945 ... 3123 3467 2392]]\n</pre> In\u00a0[19]: Copied! <pre>plt.imshow(our_image);\n</pre> plt.imshow(our_image); <p>Dealing with real data, it may be useful to change the colormap used to translate from numbers to brightness/color for display. Inside <code>plt.imshow</code> we can change which set of colors is used via <code>cmap=</code>, and change the minimum and maximum pixel values via <code>vmin=</code> and <code>vmax=</code>. We can show the translation between color and number with <code>plt.colorbar()</code>.</p> In\u00a0[20]: Copied! <pre>plt.imshow(our_image, cmap='gray', vmin=0, vmax=10000)\nplt.colorbar();\n</pre> plt.imshow(our_image, cmap='gray', vmin=0, vmax=10000) plt.colorbar(); <p>With your image array, and using what we've learned above, write and run code cells to do each of the following tasks:</p> <ol> <li>Print the shape (number of rows, number of columns) of your image.</li> <li>Print the pixel value for the pixel located at the 100th row and the 3rd column.</li> <li>Print the pixel values for the entire 100th row (it's OK if Python abbreviates this).</li> <li>Make a plot of the pixel values for the entire 100th row.</li> <li>Find a bright object in your image, and make a plot of the pixel values along a column that intersects your object.</li> <li>Print the minimum pixel value in your image.</li> <li>Create a new array consisting of your original image minus the minimum value in your original image, and confirm with <code>print</code> that the numbers are different.</li> </ol> In\u00a0[21]: Copied! <pre>our_header = our_file[0].header\n</pre> our_header = our_file[0].header <p>Then we can print the complete header simply by putting it in a code cell and running it.</p> In\u00a0[22]: Copied! <pre>our_header\n</pre> our_header Out[22]: <pre>SIMPLE  =                    T / file does conform to FITS standard             \nBITPIX  =                   16 / number of bits per data pixel                  \nNAXIS   =                    2 / number of data axes                            \nNAXIS1  =                 2048 / length of data axis 1                          \nNAXIS2  =                 2048 / length of data axis 2                          \nEXTEND  =                    T / FITS dataset may contain extensions            \nCOMMENT   FITS (Flexible Image Transport System) format is defined in 'Astronomy\nCOMMENT   and Astrophysics', volume 376, page 359; bibcode: 2001A&amp;A...376..359H \nBZERO   =                32768 / offset data range to that of unsigned short    \nBSCALE  =                    1 / default scaling factor                         \nSBUUID  = '{f9d1c135-27c4-4b43-8ba9-9f34e52476a0}' / Photo UUID                 \nEXPTIME =                 300. / SBIGFITSEXT Total exposure time in seconds     \nSWCREATE= 'TheSkyX Version 10.5.0 Build 13210' / SBIGFITSEXT Name &amp; version of s\nCOLORCCD=                    0 / Non zero if image is from a Bayer color ccd    \nDISPINCR=                    1 / Non zero to automatically display the image in \nPICTTYPE=                    1 / Image type as index 0= Unknown 1=Light, 2=Bias,\nIMAGETYP= 'Light Frame'        / SBIGFITSEXT Light, Dark, Bias or Flat          \nXORGSUBF=                    0 / SBIGFITSEXT Subframe x upper-left pixel in bin \nYORGSUBF=                    0 / SBIGFITSEXT Subframe y upper-left pixel in bin \nXBINNING=                    2 / SBIGFITSEXT Binning factor in width            \nYBINNING=                    2 / SBIGFITSEXT Binning factor in height           \nEXPSTATE=                  294                                                  \nEGAIN   =                 1.33 / SBIGFITSEXT Electronic gain in e- per ADU      \nCCD-TEMP=    -10.3329360071113 / SBIGFITSEXT Temperature of the CCD             \nSET-TEMP=    -10.5147985994181 / SBIGFITSEXT The cooler setpoint in degrees C   \nSITELAT = '+40 00 13.45'       / SBIGFITSEXT Latitude of the imaging location   \nSITELONG= '+105 15 46.86'      / SBIGFITSEXT Longitude of the imaging location  \nLST     = '+18 20 52.51'       / Local sidereal time                            \nOBSGEO-B=            40.003737 / Latitude of the observation in degrees, North +\nOBSGEO-L=    -105.263016666667 / Longitude of the observation in degrees, East +\nOBSGEO-H=                1653. / Altitude of the observation in meters          \nBTP     =                    0 / Beyond the pole                                \nCENTAZ  =     124.000825664785 / SBIGFITSEXT Azimuth of the center of the image \nCENTALT =     71.1169446959094 / SBIGFITSEXT Altitude of the center of the image\nAIRMASS =      1.0568792681925 / Airmass of the telescope                       \nTELEHA  = '-01 10 46.07'       / Telescope hour angle                           \nMOUNT   = 'Bisque TCS Professional' / The telescope mount                       \nOBJCTRA = '19 30 43.399'       / SBIGFITSEXT The right ascension of the center o\nOBJCTDEC= '+27 57 31.25'       / SBIGFITSEXT The declination of the center of th\nOBJECT  = 'Albireo '           / SBIGFITSEXT The name of the object imaged      \nINSTRUME= 'SBIG STX-16803 3 CCD Camera' / SBIGFITSEXT The model camera used.    \nXPIXSZ  =                  18. / SBIGFITSEXT Pixel width in microns after binnin\nYPIXSZ  =                  18. / SBIGFITSEXT Pixel height in microns after binni\nPEDESTAL=                 -100 / SBIGFITSEXT Add this count to each pixel value \nFOCPOS  =              157927. / The focuser position.                          \nFOCTEMP =                   0. / The focuser temperature in degrees C.          \nFOCTMPSC= 'Focuser (Default)'  / The focuser temperature source.                \nFILTER  = 'B       '           / SBIGFITSEXT The optical filter used to take ima\nDATE-OBS= '2022-09-02T02:36:59.860' / SBIGFITSEXT UTC of start exp. in ISO 8601 \nLOCALTIM= '9/1/2022 08:36:59.859 PM DST' / Local time at exposure start         </pre> <p>We can access specific entries in the header by indexing it we a header keyword.</p> In\u00a0[23]: Copied! <pre>our_header['OBJECT']\n</pre> our_header['OBJECT'] Out[23]: <pre>'Albireo'</pre>"},{"location":"basics/fits-files/#loading-fits-images","title":"\ud83c\udf03\ud83c\udf05\ud83c\udf0c Loading FITS Images\u00b6","text":"<p>This page provides a basic introduction to using <code>python</code> to load FITS (Flexible Image Transport System) data, display images, access pixel data, and find metadata.</p>"},{"location":"basics/fits-files/#what-is-an-array","title":"What is an array?\u00b6","text":"<p>In a few steps, we're going to load a FITS image into python as an array of numbers. But first, we should be familiar with what an array looks like. Let's start by importing some common tools.</p>"},{"location":"basics/fits-files/#how-do-we-load-a-fits-image-into-an-array","title":"How do we load a FITS image into an array?\u00b6","text":"<p>FITS files are a (mostly) astronomy-specific file format, so the <code>astropy</code> package provides tools for loading these files into Python. Let's import the input/output tool for FITS files.</p>"},{"location":"basics/fits-files/#how-do-we-view-fits-headers","title":"How do we view FITS headers?\u00b6","text":"<p>FITS headers contain useful metadata that might be necessary for our analyses. We can access the header from our loaded file as follows.</p>"},{"location":"basics/fits-files/#good-luck","title":"Good luck!\u00b6","text":"<p>You'll earn course credit for completing this worksheet, but we won't grade your individual responses. It is your responsibility to make sure you learn the skills to complete the tasks above. If you have questions (you probably will!), please ask in-person or on slack!</p>"},{"location":"basics/plots/","title":"\ud83e\uddee\u270f\ufe0f\ud83d\udcc8 Plotting 1D Functions","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\n</pre> import matplotlib.pyplot as plt import numpy as np In\u00a0[2]: Copied! <pre>x = np.array([1,1,2,3,5,8])\ny = np.array([3,1,4,1,5,9])\n</pre> x = np.array([1,1,2,3,5,8]) y = np.array([3,1,4,1,5,9]) <p>Next, we'll plot them. The <code>plt.plot</code> function will by default draw lines without points, and the <code>plt.scatter</code> function will draw points without lines.</p> In\u00a0[3]: Copied! <pre>plt.plot(x, y);\n</pre> plt.plot(x, y); In\u00a0[4]: Copied! <pre>plt.scatter(x, y);\n</pre> plt.scatter(x, y); <p>Both tools accept keyword arguments to customize the appearance of the plotted data. Here are a few tiny examples; notice the keyword names are different between <code>plt.plot</code> and <code>plt.scatter</code>.</p> In\u00a0[5]: Copied! <pre>plt.plot(x, y, linewidth=3, color='orchid', marker='s', markersize=10)\n</pre> plt.plot(x, y, linewidth=3, color='orchid', marker='s', markersize=10) Out[5]: <pre>[&lt;matplotlib.lines.Line2D at 0x116d9b800&gt;]</pre> In\u00a0[6]: Copied! <pre>plt.scatter(x, y, c='orchid', marker='s', s=100);\n</pre> plt.scatter(x, y, c='orchid', marker='s', s=100); <p>One snazzy feature of <code>plt.scatter</code> is that you can change the color or size of the points based on arrays, allowing you to express additional dimensions on the same plot. The symbol areas will scale with the numbers in <code>s=</code>, and numbers in <code>c=</code> will be translated to color via a colormap.</p> In\u00a0[7]: Copied! <pre>plt.scatter(x, y, s=100*x**2, c=x+y, cmap='cividis');\n</pre> plt.scatter(x, y, s=100*x**2, c=x+y, cmap='cividis'); In\u00a0[8]: Copied! <pre>np.arange(5, 7, 0.2)\n</pre> np.arange(5, 7, 0.2) Out[8]: <pre>array([5. , 5.2, 5.4, 5.6, 5.8, 6. , 6.2, 6.4, 6.6, 6.8])</pre> <p><code>np.linspace(start, stop, num)</code> will create an array that goes linearly from <code>start</code> up to (and including) <code>stop</code> in <code>num</code> total steps. It's useful if the total number of elements in your array is what matters most to you.</p> In\u00a0[9]: Copied! <pre>np.linspace(2, 4, 6)\n</pre> np.linspace(2, 4, 6) Out[9]: <pre>array([2. , 2.4, 2.8, 3.2, 3.6, 4. ])</pre> <p><code>np.logspace(start, stop, num)</code> will create an array that goes logarithmically from <code>10**start</code> up to (and including) <code>10**stop</code> in <code>num</code> total steps. It's useful if you're making a plot with logarithmic axes but still want the spacing to appear uniform.</p> In\u00a0[10]: Copied! <pre>np.logspace(0, 2, 5)\n</pre> np.logspace(0, 2, 5) Out[10]: <pre>array([  1.        ,   3.16227766,  10.        ,  31.6227766 ,\n       100.        ])</pre> <p>To plot a function, we specify the array using one of those tools and do whatever calculation we want.</p> In\u00a0[11]: Copied! <pre>theta = np.linspace(-5*np.pi, 5*np.pi, 1000)\ny = np.sin(theta)/(10 + theta**2)\n</pre> theta = np.linspace(-5*np.pi, 5*np.pi, 1000) y = np.sin(theta)/(10 + theta**2) <p>If your calculation is more complicated than just a simple function, it might be useful to check that your dependent variable (<code>y</code>) has the same shape as your independent one (<code>theta</code>).</p> In\u00a0[12]: Copied! <pre>theta.shape\n</pre> theta.shape Out[12]: <pre>(1000,)</pre> In\u00a0[13]: Copied! <pre>y.shape\n</pre> y.shape Out[13]: <pre>(1000,)</pre> <p>Then, we can just plot those two arrays against each other.</p> In\u00a0[14]: Copied! <pre>plt.plot(theta, y);\n</pre> plt.plot(theta, y); <p>Of course, we should also add human-friendly aspects like labels, titles, and colorbars.</p> In\u00a0[15]: Copied! <pre>plt.scatter(theta, y, c=np.sin(theta), s=49*(1 + np.cos(theta)))\nplt.xlabel(r'$\\theta$ (radians)');\nplt.ylabel('y (some amazing unit)')\nplt.title('What a swell plot!')\nplt.colorbar();\n</pre> plt.scatter(theta, y, c=np.sin(theta), s=49*(1 + np.cos(theta))) plt.xlabel(r'$\\theta$ (radians)'); plt.ylabel('y (some amazing unit)') plt.title('What a swell plot!') plt.colorbar();"},{"location":"basics/plots/#plotting-1d-functions","title":"\ud83e\uddee\u270f\ufe0f\ud83d\udcc8 Plotting 1D Functions\u00b6","text":"<p>This page demonstrates how to plot 1D arrays in Python, which we might want to do either if we have some discrete data points that we'd like to visualize or if we want to draw smooth curve for a mathematical function.</p>"},{"location":"basics/plots/#how-do-we-plot-one-array-against-another","title":"How do we plot one array against another?\u00b6","text":"<p>Let's construct two 1D arrays, and plot one as <code>x</code> and one as <code>y</code>, using a few different plotting styles. We'll start by constructing two simple arrays.</p>"},{"location":"basics/plots/#how-do-we-plot-smooth-curves-of-mathematical-functions","title":"How do we plot smooth curves of mathematical functions?\u00b6","text":"<p>We can use the same tools to plot smooth mathematical functions, but we have to create the grid of values on which it will be evaluated ourselves. Three tools are commonly very useful for creating these grids.</p> <p><code>np.arange(start, stop, step)</code> will create an array that goes linearly from <code>start</code> up to (but not including) <code>stop</code> in steps of <code>step</code>. It's useful if exactly specifying the step size is what matters most to you.</p>"},{"location":"basics/plots/#how-can-we-learn-more","title":"How can we learn more?\u00b6","text":"<p>These tools are enormously powerful, but you may need to do a little research to figure out what options to use and how to combine commands to achieve what effects you desire. To see what's available for each function, you can run <code>plt.plot?</code> or <code>plt.scatter?</code> (or type the function name and then hit <code>&lt;tab&gt;</code>) from within a jupyter cell. Or, for all the lovely details, peruse the online documentation for <code>matplotlib.pyplot</code>.</p>"},{"location":"basics/units/","title":"\ud83d\udccf\ud83c\udfcb\ufe0f\u2615\ufe0f Using Units","text":"In\u00a0[1]: Copied! <pre>a = 2\nb = 3\na + b\n</pre> a = 2 b = 3 a + b Out[1]: <pre>5</pre> <p>...and get an answer that doesn't make any sense whatsoever. We have so much else to think about when coding, so sometimes it'd be nice if we didn't have to expend too much mental energy on converting units between variables.</p> In\u00a0[2]: Copied! <pre>import astropy.units as u\n</pre> import astropy.units as u In\u00a0[3]: Copied! <pre>a = 2*u.km\nb = 3*u.cm\na+b\n</pre> a = 2*u.km b = 3*u.cm a+b Out[3]:  $2.00003 \\; \\mathrm{km}$  <p>Hooray! The unit conversion happened automatically and gave us a sensible answer. The result has a unit attached to it so we know what it is, and we can convert it to any other distance unit we want!</p> In\u00a0[4]: Copied! <pre>c = a+b\n</pre> c = a+b  In\u00a0[5]: Copied! <pre>c.to('m')\n</pre> c.to('m') Out[5]:  $2000.03 \\; \\mathrm{m}$  In\u00a0[6]: Copied! <pre>c.to('au')\n</pre> c.to('au') Out[6]:  $1.3369375 \\times 10^{-8} \\; \\mathrm{AU}$  In\u00a0[7]: Copied! <pre>c.to('lightyear')\n</pre> c.to('lightyear') Out[7]:  $2.1140334 \\times 10^{-13} \\; \\mathrm{lyr}$  <p>Let's try a slightly more complicated calculation, figuring out the gravitational acceleration near Earth's surface.</p> In\u00a0[8]: Copied! <pre># define the inputs to our calculation\nG = 6.7e-11*u.m**3/u.kg/u.s**2\nM = 6.0e27*u.g\nR = 6.4e3*u.km\n\n# do the calculation\ng = G*M/R**2\n</pre> # define the inputs to our calculation G = 6.7e-11*u.m**3/u.kg/u.s**2 M = 6.0e27*u.g R = 6.4e3*u.km  # do the calculation g = G*M/R**2 In\u00a0[9]: Copied! <pre>g\n</pre> g Out[9]:  $9.8144531 \\times 10^{9} \\; \\mathrm{\\frac{m^{3}\\,g}{kg\\,km^{2}\\,s^{2}}}$  <p>Ug! That seems to have the 9.8 part right, but the units are nasty. Let's ask Python to please convert that into more familiar and useful units.</p> In\u00a0[10]: Copied! <pre>g.to('m/s**2')\n</pre> g.to('m/s**2') Out[10]:  $9.8144531 \\; \\mathrm{\\frac{m}{s^{2}}}$  <p>If we don't know what the final units of our result may be, we can ask simply to \"decompose\" the units into something simpler. In this example, it gives us the same $\\rm{m/s^2}$ we were hoping for.</p> In\u00a0[11]: Copied! <pre>g.decompose()\n</pre> g.decompose() Out[11]:  $9.8144531 \\; \\mathrm{\\frac{m}{s^{2}}}$  In\u00a0[12]: Copied! <pre>g.to('kg')\n</pre> g.to('kg') <pre>\n---------------------------------------------------------------------------\nUnitConversionError                       Traceback (most recent call last)\nCell In[12], line 1\n----&gt; 1 g.to('kg')\n\nFile ~/opt/anaconda3/envs/2024/lib/python3.12/site-packages/astropy/units/quantity.py:943, in Quantity.to(self, unit, equivalencies, copy)\n    939 unit = Unit(unit)\n    940 if copy:\n    941     # Avoid using to_value to ensure that we make a copy. We also\n    942     # don't want to slow down this method (esp. the scalar case).\n--&gt; 943     value = self._to_value(unit, equivalencies)\n    944 else:\n    945     # to_value only copies if necessary\n    946     value = self.to_value(unit, equivalencies)\n\nFile ~/opt/anaconda3/envs/2024/lib/python3.12/site-packages/astropy/units/quantity.py:896, in Quantity._to_value(self, unit, equivalencies)\n    893     equivalencies = self._equivalencies\n    894 if not self.dtype.names or isinstance(self.unit, StructuredUnit):\n    895     # Standard path, let unit to do work.\n--&gt; 896     return self.unit.to(\n    897         unit, self.view(np.ndarray), equivalencies=equivalencies\n    898     )\n    900 else:\n    901     # The .to() method of a simple unit cannot convert a structured\n    902     # dtype, so we work around it, by recursing.\n    903     # TODO: deprecate this?\n    904     # Convert simple to Structured on initialization?\n    905     result = np.empty_like(self.view(np.ndarray))\n\nFile ~/opt/anaconda3/envs/2024/lib/python3.12/site-packages/astropy/units/core.py:1227, in UnitBase.to(self, other, value, equivalencies)\n   1225     return UNITY\n   1226 else:\n-&gt; 1227     return self.get_converter(Unit(other), equivalencies)(value)\n\nFile ~/opt/anaconda3/envs/2024/lib/python3.12/site-packages/astropy/units/core.py:1156, in UnitBase.get_converter(self, other, equivalencies)\n   1153             else:\n   1154                 return lambda v: b(converter(v))\n-&gt; 1156 raise exc\n\nFile ~/opt/anaconda3/envs/2024/lib/python3.12/site-packages/astropy/units/core.py:1139, in UnitBase.get_converter(self, other, equivalencies)\n   1137 # if that doesn't work, maybe we can do it with equivalencies?\n   1138 try:\n-&gt; 1139     return self._apply_equivalencies(\n   1140         self, other, self._normalize_equivalencies(equivalencies)\n   1141     )\n   1142 except UnitsError as exc:\n   1143     # Last hope: maybe other knows how to do it?\n   1144     # We assume the equivalencies have the unit itself as first item.\n   1145     # TODO: maybe better for other to have a `_back_converter` method?\n   1146     if hasattr(other, \"equivalencies\"):\n\nFile ~/opt/anaconda3/envs/2024/lib/python3.12/site-packages/astropy/units/core.py:1090, in UnitBase._apply_equivalencies(self, unit, other, equivalencies)\n   1087 unit_str = get_err_str(unit)\n   1088 other_str = get_err_str(other)\n-&gt; 1090 raise UnitConversionError(f\"{unit_str} and {other_str} are not convertible\")\n\nUnitConversionError: 'm3 g / (kg km2 s2)' (acceleration) and 'kg' (mass) are not convertible</pre> In\u00a0[13]: Copied! <pre>import astropy.constants as con\n</pre> import astropy.constants as con In\u00a0[14]: Copied! <pre># define the inputs to our calculation\nG = con.G\nM = 1*u.M_earth\nR = 1*u.R_earth\n\n# do the calculation\ng = G*M/R**2\n</pre> # define the inputs to our calculation G = con.G M = 1*u.M_earth R = 1*u.R_earth  # do the calculation g = G*M/R**2 In\u00a0[15]: Copied! <pre>g\n</pre> g Out[15]:  $6.6743 \\times 10^{-11} \\; \\mathrm{\\frac{m^{3}\\,M_{\\oplus}}{kg\\,R_{\\oplus}^{2}\\,s^{2}}}$  In\u00a0[16]: Copied! <pre>g.decompose()\n</pre> g.decompose() Out[16]:  $9.7983981 \\; \\mathrm{\\frac{m}{s^{2}}}$  <p>That's more accurate and precise than our previous calculation, in which we provided each number just to 2 significant digits. In this particular example we used <code>G</code> from <code>constants</code> and Earth's mass and radius from <code>units</code>, but know that some quantities (like Earth's mass and radius) will appear in both <code>units</code> and <code>constants</code>.</p> In\u00a0[17]: Copied! <pre>print(con.G)\n</pre> print(con.G) <pre>  Name   = Gravitational constant\n  Value  = 6.6743e-11\n  Uncertainty  = 1.5e-15\n  Unit  = m3 / (kg s2)\n  Reference = CODATA 2018\n</pre> In\u00a0[18]: Copied! <pre>g.to_value('m/s**2')\n</pre> g.to_value('m/s**2') Out[18]: <pre>9.798398133669465</pre> In\u00a0[19]: Copied! <pre>g.to_value(u.m/u.s**2)\n</pre> g.to_value(u.m/u.s**2) Out[19]: <pre>9.798398133669465</pre> <p>We can call <code>.to_value()</code> without any arguments to return the value in its current unit, but be aware that current unit might be something confusing! For example, if we look at the undecomposed value for <code>g</code>, it will give us a value in strange units involved Earth radii and masses.</p> In\u00a0[20]: Copied! <pre>g.to_value()\n</pre> g.to_value() Out[20]: <pre>6.6743e-11</pre> In\u00a0[21]: Copied! <pre>g.decompose().to_value()\n</pre> g.decompose().to_value() Out[21]: <pre>9.798398133669465</pre>"},{"location":"basics/units/#using-units","title":"\ud83d\udccf\ud83c\udfcb\ufe0f\u2615\ufe0f Using Units\u00b6","text":"<p>This page shows how to use <code>astropy.units</code> and <code>astropy.constants</code> to attach physical units to numbers and arrays. When doing calculations, numbers are just numbers, and Python will happily calculate whatever we tell it to, whether that calculation makes conceptual sense or not. To help remedy this problem, the community-developed <code>astropy</code> package provides a snazzy toolkit for attaching units to quantities, handling conversions between units, and making our code complain if we try to do something nonesensical.</p>"},{"location":"basics/units/#whats-the-problem","title":"What's the problem?\u00b6","text":"<p>Let's say we have a calculation where we need to add two lengths together: $2\\rm{km} + 3\\rm{cm}$. In Python, if we're not paying attention, we might accidentally write this as...</p>"},{"location":"basics/units/#how-can-we-do-unit-calculations-more-carefully","title":"How can we do unit calculations more carefully?\u00b6","text":"<p>The solution to this problem is to let variables have units associated with them and let Python do any necessary unit conversions for us. If we import some unit tools from <code>astropy</code> into the shortcut <code>u</code>, we can do this.</p>"},{"location":"basics/units/#discuss","title":"<code>Discuss!</code>\u00b6","text":"<p>What happens if we try to do an impossible unit conversion using <code>astropy.units</code> (like in the code line below)? Is that behavior helpful or annoying?</p>"},{"location":"basics/units/#how-do-we-include-famous-physical-constants","title":"How do we include famous physical constants?\u00b6","text":"<p>We use a lot of physical constants in astronomy, many with very strange units. Fortunately, <code>astropy</code> provides a database of many common astronomical constants that might be useful for our calculations. Let's repeat the above, using the <code>astropy.constants</code> module.</p>"},{"location":"basics/units/#discuss","title":"<code>Discuss!</code>\u00b6","text":"<p>Can we construct arrays of numbers that have units associated with them (for example, a 1D array of times, a 2D array of ADU per pixel, or a 3D array of density in some volume)? In what contexts might that be useful?</p>"},{"location":"basics/units/#ack-can-i-get-rid-of-the-units","title":"Ack! Can I get rid of the units?!?\u00b6","text":"<p>We might find we want to do a calculation with units and constants but then convert our result back to a simple number or array. Some <code>numpy</code>, <code>scipy</code>, or <code>plt</code> functions don't play nicely with units, so we might want to drop the units from a quantity as some point. We can use the <code>.to_value()</code> method to return just the value of the quantity, in whatever units we specify.</p>"},{"location":"basics/units/#how-can-you-apply-this-yourself","title":"How can you apply this yourself?\u00b6","text":"<p>Take what you've learned above and try out the following questions, using <code>astropy</code> units and/or constants in your calculations. Remember that in <code>jupyter</code> you can start typing a variable name and then hit <code>&lt;tab&gt;</code> to try to automatically complete the rest of its name.</p> <ol> <li>If we drive a car continuously at a speed of 100 $\\rm{km/hr}$ for 0.5 $\\rm{fortnights}$, how many $\\rm{lightseconds}$ have we traveled?</li> <li>Calculate the energy $E$ of a photon with a wavelength $\\lambda = 500 \\rm{nm}$, using the equation $E = h\\nu = hc/\\lambda$. Print your result in units of Joules, ergs, electron volts, and kilwowatt hours.</li> </ol> <p>The documentation for <code>astropy.units</code> and <code>astropy.constants</code> is extensive and helpful. You can do much more than the basics shown here; search for the documentation online to figure out what you need!</p>"},{"location":"concepts/catching-photons/","title":"\ud83d\udca1\u2709\ufe0f\ud83c\udf0a Photon Noise","text":"In\u00a0[1]: Copied! <pre>from astr3510 import catch_photons_in_bucket\nimport astropy.units as u\nimport numpy as np\nimport matplotlib.pyplot as plt\n</pre> from astr3510 import catch_photons_in_bucket import astropy.units as u import numpy as np import matplotlib.pyplot as plt <p>Let's imagine we focus our telescope on a star that has a particular brightness, meaning that there is a particular rate at which photons from this star rain down on our telescope, in units like $\\mathrm{photons/s/m^2}$. We can imagine our telescope as a light bucket, that we hold out in this rain of photons. The larger our bucket (telescope aperture) or the longer we let it collect rain (exposure time), the more raindrops will fall into the bucket (photons).</p> <p>If we know the collecting area of the telescope, the exposure time, and the brightness of the source we're observing, we can calculate an exact average number of photons we should expect to see in an exposure. In reality, we won't alway detect exactly that expected number, and not just because this expectation value might not be a non-integer number of photons. The discrete nature of light means that the actual photons we detect in a given observation will be drawn from a Poisson probability distribution centered at the expected number of photons.</p> <p>Let's experiment a few times with some default settings:</p> In\u00a0[2]: Copied! <pre>N = catch_photons_in_bucket()\n</pre> N = catch_photons_in_bucket() In\u00a0[3]: Copied! <pre>N = catch_photons_in_bucket()\n</pre> N = catch_photons_in_bucket() In\u00a0[4]: Copied! <pre>N = catch_photons_in_bucket()\n</pre> N = catch_photons_in_bucket() <p>The left panel visualizes positions where individual photons might have entered the telescope; the upper right shows the numerical details of how many photons we expect and why; and the lower right shows how the actual number of photons detected compares to the Poisson probability distribution for the given expectation value.</p> <p>In three different exposures, even with the same aperture, exposure time, and object brightness, we detected a different number of photons due the randomness of the times at which individual photons arrive at the telescope.</p> In\u00a0[5]: Copied! <pre>N = catch_photons_in_bucket(rate=1*u.photon/u.s/u.m**2, \n                            diameter=2/np.sqrt(np.pi)*u.m,\n                            time=100*u.s)\n</pre> N = catch_photons_in_bucket(rate=1*u.photon/u.s/u.m**2,                              diameter=2/np.sqrt(np.pi)*u.m,                             time=100*u.s) <p>Now, let's compare what we see how things changes for different expectation values for the number of photons. We'll do this by changing the exposure time, collecting photons for a shorter or longer duration.</p> In\u00a0[6]: Copied! <pre>for t in [1, 10, 100, 1000, 10000]*u.s:\n    N = catch_photons_in_bucket(rate=10*u.photon/u.s/u.m**2, \n                                diameter=2/np.sqrt(np.pi)*u.m,\n                                time=t)\n</pre> for t in [1, 10, 100, 1000, 10000]*u.s:     N = catch_photons_in_bucket(rate=10*u.photon/u.s/u.m**2,                                  diameter=2/np.sqrt(np.pi)*u.m,                                 time=t) <p>If we expect $N$ photons, the standard deviation of the Poisson distribution will be about $\\sqrt{N}$. Looking closely at the numbers, we'll see that the absolute values of the numbers tend to be farther away from the expected values for larger $N$. However, it's important to consider what these means for the fractional uncertainty:</p> <ul> <li>At small values, $N$ might be $10\\pm\\sqrt{10}$, which means there's a very large fractional uncertainty on how many photons we'll actually detect, as $\\sqrt{10}/10 = 31.6\\%$.</li> <li>At large values, with $N$ being like $10^4 \\pm \\sqrt{10^4}$, the fractional uncertainty will be much lower, as $\\sqrt{10^4}/10^4 = 1\\%$ The uncertainty on the number of photons $N$ will increase as $\\sqrt{N}$, but the fractional uncertainty on the number of photons we're detecting (which is what we'll ultimately translate into a statement of \"how bright is this object\") will go down as $\\sqrt{N}/N = 1/\\sqrt{N}$.</li> </ul> <p>We can test this behavior by calling our photon-catching functions for many exposure times and seeing how the numbers change with exposure time. We'll do this with visualizations turned off, to avoid clutter.</p> In\u00a0[7]: Copied! <pre># try a bunch of different exposure times \nexpectations = []\nactuals = []\ntimes = np.logspace(0, 2, 200)\nfor t in times:\n    # store the expected number\n    brightness = 1*u.photon/u.s/u.m**2\n    D = 2/np.sqrt(np.pi)*u.m\n    expected = np.pi*(D/2)**2*brightness*t*u.s\n    expectations.append(expected)\n    \n    # store to observe number\n    N = catch_photons_in_bucket(rate=brightness, \n                                diameter=D,\n                                time=t*u.s, \n                                visualize=False)\n    actuals.append(N)\n    \nN_expected = u.Quantity(expectations).value\nN_actual = u.Quantity(actuals).value\n</pre> # try a bunch of different exposure times  expectations = [] actuals = [] times = np.logspace(0, 2, 200) for t in times:     # store the expected number     brightness = 1*u.photon/u.s/u.m**2     D = 2/np.sqrt(np.pi)*u.m     expected = np.pi*(D/2)**2*brightness*t*u.s     expectations.append(expected)          # store to observe number     N = catch_photons_in_bucket(rate=brightness,                                  diameter=D,                                 time=t*u.s,                                  visualize=False)     actuals.append(N)      N_expected = u.Quantity(expectations).value N_actual = u.Quantity(actuals).value In\u00a0[8]: Copied! <pre># make a grid to store the results plot\nfi, ax = plt.subplots(2, 2, figsize=(6,4), dpi=300, sharex='col', constrained_layout=True)\n\n# plot the actual numbers of photons linearly\nplt.sca(ax[0, 0])\nplt.scatter(times, N_actual, s=10)\nplt.fill_between(times,\n                 N_expected-np.sqrt(N_expected), \n                 N_expected+np.sqrt(N_expected), \n                 zorder=-1)\nplt.ylabel('$N_{actual}$')\n\n# plot the actual numbers of photons logarithmically\nplt.sca(ax[0, 1])\nplt.scatter(times, N_actual, s=10)\nplt.fill_between(times,\n                 N_expected-np.sqrt(N_expected), \n                 N_expected+np.sqrt(N_expected), \n                 zorder=-1)\nplt.yscale('log')\nplt.xscale('log')\nplt.ylabel('$N_{actual}$')\n\n# plot the actual divided by the expected, linearly\nplt.sca(ax[1,0])\nplt.scatter(times, N_actual/N_expected, s=10)\nplt.fill_between(times, \n                 1-1/np.sqrt(N_expected), \n                 1+1/np.sqrt(N_expected), \n                 zorder=-1)\nplt.ylabel('$N_{actual}/N_{expected}$')\nplt.ylim(0, 2)\n\n# plot the actual divided by the expected, logarithmically\nplt.sca(ax[1,1])\nplt.scatter(times, N_actual/N_expected, s=10)\nplt.fill_between(times, \n                 1-1/np.sqrt(N_expected), \n                 1+1/np.sqrt(N_expected), \n                 zorder=-1)\nplt.ylabel('$N_{actual}/N_{expected}$')\nplt.ylim(0, 2)\nplt.xscale('log')\nfi.supxlabel('Time (s)');\n</pre> # make a grid to store the results plot fi, ax = plt.subplots(2, 2, figsize=(6,4), dpi=300, sharex='col', constrained_layout=True)  # plot the actual numbers of photons linearly plt.sca(ax[0, 0]) plt.scatter(times, N_actual, s=10) plt.fill_between(times,                  N_expected-np.sqrt(N_expected),                   N_expected+np.sqrt(N_expected),                   zorder=-1) plt.ylabel('$N_{actual}$')  # plot the actual numbers of photons logarithmically plt.sca(ax[0, 1]) plt.scatter(times, N_actual, s=10) plt.fill_between(times,                  N_expected-np.sqrt(N_expected),                   N_expected+np.sqrt(N_expected),                   zorder=-1) plt.yscale('log') plt.xscale('log') plt.ylabel('$N_{actual}$')  # plot the actual divided by the expected, linearly plt.sca(ax[1,0]) plt.scatter(times, N_actual/N_expected, s=10) plt.fill_between(times,                   1-1/np.sqrt(N_expected),                   1+1/np.sqrt(N_expected),                   zorder=-1) plt.ylabel('$N_{actual}/N_{expected}$') plt.ylim(0, 2)  # plot the actual divided by the expected, logarithmically plt.sca(ax[1,1]) plt.scatter(times, N_actual/N_expected, s=10) plt.fill_between(times,                   1-1/np.sqrt(N_expected),                   1+1/np.sqrt(N_expected),                   zorder=-1) plt.ylabel('$N_{actual}/N_{expected}$') plt.ylim(0, 2) plt.xscale('log') fi.supxlabel('Time (s)'); <p>With our little numerical experiments, we can see that the Poisson distribution gets wider as $\\sqrt{N}$ for increasing expectation value $N$, but that the fraction difference from the true underlying expected value goes down as $1\\sqrt{N}$.</p>"},{"location":"concepts/catching-photons/#photon-noise","title":"\ud83d\udca1\u2709\ufe0f\ud83c\udf0a Photon Noise\u00b6","text":"<p>Light travels as photons. When we talk about the luminosity of a star or the brightness of the Sun in the sky, we're talking about so many photons that it makes sense to treat light as a continuous stream. However, when light spreads out of interstellar distances or when we're imaging something that's intrinsically faint, we need to start paying attention to individual photons. When we're measuring light, even if we neglect all other sources of noise, the randomness of the times with which these photons arrive at our telescope create an inescapable source of uncertainty called \"photon noise\" or \"Poisson noise.\"</p> <p>This page presents a pedagogical simulation of a cartoon telescope, and uses it to explore the concept of photon noise.</p>"},{"location":"concepts/catching-photons/#telescopes-as-light-buckets","title":"Telescopes as Light Buckets\u00b6","text":""},{"location":"concepts/catching-photons/#sqrtn-and-1sqrtn","title":"$\\sqrt{N}$ and $1/\\sqrt{N}$\u00b6","text":"<p>Let's play with the input parameters of our observation a little by setting some keywords in the <code>catch_photons_in_bucket</code> function. We'll change the incoming photon flux (<code>rate</code>), the telescope mirror diameter (<code>diameter</code>), and the exposure time (<code>time</code>). We'll tweak the values to get us to an expectation value of 100 photons.</p>"},{"location":"concepts/catching-photons/#learn-more","title":"Learn more! \ud83e\uddd1\u200d\ud83c\udfeb\ud83c\udf0a\u2709\ufe0f\u00b6","text":"<p>Play around with the <code>catch_photons_in_bucket</code> function to develop your understanding of how photon-counting statistics behave in different limits. Have fun!</p>"},{"location":"concepts/chi-squared-fitting/","title":"\u270d\ufe0f\ud83e\uddee\u2764\ufe0f Models + Data","text":"<p>This notebook provide a very brief whirlwind perspective on how to fit models to data. We make lots of assumptions and hide lots of caveats, but we try to show general principles for finding good models.</p> In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt, numpy as np\nplt.rcParams['figure.dpi'] = 300\nplt.rcParams['figure.figsize'] = (8,3)\nfrom IPython.display import Image\nfrom astropy.io import ascii\n</pre> import matplotlib.pyplot as plt, numpy as np plt.rcParams['figure.dpi'] = 300 plt.rcParams['figure.figsize'] = (8,3) from IPython.display import Image from astropy.io import ascii In\u00a0[2]: Copied! <pre>Image('leavitt-text.png')\n</pre> Image('leavitt-text.png') Out[2]: In\u00a0[3]: Copied! <pre>table = ascii.read('leavitt-periods.csv')\ntable\n</pre> table = ascii.read('leavitt-periods.csv') table Out[3]: Table length=25 star_numbermax_magnitudemin_magnitudeepochperiod int64float64float64float64float64 150514.816.10.021.25336 143614.816.40.021.6637 144614.816.41.381.762 150615.116.31.081.87502 141314.715.60.352.17352 146014.415.70.02.913 142214.715.90.63.501 84214.616.12.614.2897 142514.315.32.84.547 ............... 137413.915.26.08.397 81813.614.74.010.336 161013.414.611.011.645 136513.814.89.612.417 135113.514.44.013.08 82713.414.311.613.47 82213.014.613.016.75 82312.214.12.931.94 82411.412.84.065.8 82111.212.197.0127.0 <p>Let's simplify these into \"x\" and \"y\" quantities we'll try to visualize and fit. For fitting, we'll say that the independent variable $x$ is $\\log_{10}$(pulsation period) and the dependent variable $y$ is the star's apparent magnitude.</p> In\u00a0[4]: Copied! <pre>log_period = np.log10(table['period'])\nmagnitude = 0.5*(table['min_magnitude'] + table['max_magnitude'])\nmagnitude_uncertainty = 0.2\n</pre> log_period = np.log10(table['period']) magnitude = 0.5*(table['min_magnitude'] + table['max_magnitude']) magnitude_uncertainty = 0.2 <p>Let's plot those data, with no model yet. (We'll put the plotting in a function so we can reuse it later.)</p> In\u00a0[5]: Copied! <pre>def plot_data():\n    '''\n    Plot the data by itself.\n    '''\n    plt.errorbar(log_period, magnitude, magnitude_uncertainty, \n                 linewidth=0, elinewidth=1, color='black', marker='o')\n    plt.ylim(16.5, 11)\n    plt.xlabel('log$_{10}$[Pulsation Period (in days)]'); plt.ylabel('Photographic Apparent Magnitude');\nplot_data()\n</pre> def plot_data():     '''     Plot the data by itself.     '''     plt.errorbar(log_period, magnitude, magnitude_uncertainty,                   linewidth=0, elinewidth=1, color='black', marker='o')     plt.ylim(16.5, 11)     plt.xlabel('log$_{10}$[Pulsation Period (in days)]'); plt.ylabel('Photographic Apparent Magnitude'); plot_data() In\u00a0[6]: Copied! <pre>def model(x, a, b):\n    '''\n    This function takes the log10(period) as an independent variable  \n    and two parameters (a = intercept, b = slope), and it returns \n    model values for the apparent magnitude of the star.\n    '''\n    return a + b*x\n</pre> def model(x, a, b):     '''     This function takes the log10(period) as an independent variable       and two parameters (a = intercept, b = slope), and it returns      model values for the apparent magnitude of the star.     '''     return a + b*x <p>Let's plot the model, for some set of parameters, with no data. (We'll put the plotting in a function so we can reuse it later.)</p> In\u00a0[7]: Copied! <pre>def plot_model(a=13, b=1):\n    '''\n    Plot the model by itself.\n    '''\n    grid_of_log_periods = np.linspace(0, 2.2)\n    model_magnitudes = model(grid_of_log_periods, a, b)\n\n    plt.plot(grid_of_log_periods, model_magnitudes, color='cornflowerblue', linewidth=3)\n    plt.ylim(16.5, 11)\n    plt.xlabel('log$_{10}$[Pulsation Period (in days)]'); plt.ylabel('Photographic Apparent Magnitude');\nplot_model()\n</pre> def plot_model(a=13, b=1):     '''     Plot the model by itself.     '''     grid_of_log_periods = np.linspace(0, 2.2)     model_magnitudes = model(grid_of_log_periods, a, b)      plt.plot(grid_of_log_periods, model_magnitudes, color='cornflowerblue', linewidth=3)     plt.ylim(16.5, 11)     plt.xlabel('log$_{10}$[Pulsation Period (in days)]'); plt.ylabel('Photographic Apparent Magnitude'); plot_model() In\u00a0[8]: Copied! <pre>def plot_data_and_model(a=13, b=1):\n    '''\n    This plots both the data and the model (and gives it a title).\n    '''\n    plot_data()\n    plot_model(a, b)\n    plt.title(r'$y_{model} = a + bx$' + f' = {a:.2f}{b:+.2f}$x$')\n</pre> def plot_data_and_model(a=13, b=1):     '''     This plots both the data and the model (and gives it a title).     '''     plot_data()     plot_model(a, b)     plt.title(r'$y_{model} = a + bx$' + f' = {a:.2f}{b:+.2f}$x$')  <p>One way to figure out reasonable parameters for our model is to fiddle with them by hand.</p> In\u00a0[9]: Copied! <pre>plot_data_and_model(a=13, b=1)\n</pre> plot_data_and_model(a=13, b=1) <p>But for various reasons that feels like not a great general method.</p> <p>Fortunately, we can write down a function describing the probability density of the parameters $p(a,b)$. With this function, we can determine:</p> <ul> <li>the values of $a$ and $b$ that maximize the PDF (the \"maximum likelihood estimates\"). We might think of these as our \"best-fit\" values.</li> <li>the range of values that fall within some probability confidence interval of those best-fit values. We could use this range to summarize the uncertainty on those parameters.</li> </ul> <p>Let's write functions to calculate the $\\chi^2$ (\"chi-squared\").</p> In\u00a0[10]: Copied! <pre>def calculate_chisq(a, b):\n    '''\n    Return the value of chi-squared for given a and b.\n    '''\n    y = magnitude\n    ymodel = model(log_period, a, b)\n    sigma = magnitude_uncertainty\n    return np.sum(((y-ymodel)/sigma)**2)\n</pre> def calculate_chisq(a, b):     '''     Return the value of chi-squared for given a and b.     '''     y = magnitude     ymodel = model(log_period, a, b)     sigma = magnitude_uncertainty     return np.sum(((y-ymodel)/sigma)**2) <p>Let's redefine our plotting function to also show the $\\chi^2$ values now too:</p> In\u00a0[11]: Copied! <pre>def plot_data_and_model(a=13, b=1):\n    '''\n    This plots both the data and the model (and gives it a title).\n    '''\n    plot_data()\n    plot_model(a, b)\n    chisq = calculate_chisq(a,b)\n    plt.title(r'$y_{model} = a + bx$' + f' = {a:.2f}{b:+.2f}$x$ | $\\chi^2$={chisq:.1f}')\n</pre> def plot_data_and_model(a=13, b=1):     '''     This plots both the data and the model (and gives it a title).     '''     plot_data()     plot_model(a, b)     chisq = calculate_chisq(a,b)     plt.title(r'$y_{model} = a + bx$' + f' = {a:.2f}{b:+.2f}$x$ | $\\chi^2$={chisq:.1f}') <pre>&lt;&gt;:8: SyntaxWarning: invalid escape sequence '\\c'\n&lt;&gt;:8: SyntaxWarning: invalid escape sequence '\\c'\n/var/folders/sz/5zjhq1h17p7gsb7fr5jr1lch0000gp/T/ipykernel_73753/4128376522.py:8: SyntaxWarning: invalid escape sequence '\\c'\n  plt.title(r'$y_{model} = a + bx$' + f' = {a:.2f}{b:+.2f}$x$ | $\\chi^2$={chisq:.1f}')\n</pre> <p>We can tell that $\\chi^2$ is a useful quantitative figure of merit. It gets smaller if our model get's closer!</p> In\u00a0[12]: Copied! <pre>plot_data_and_model(a=16, b=-2)\n</pre> plot_data_and_model(a=16, b=-2) <p>Let's make a map of $\\chi^2(a,b)$ over lots of values of $a$ and $b$.</p> In\u00a0[13]: Copied! <pre>res = 100\na_explore = np.linspace(17,15,res)\nb_explore = np.linspace(-3, -1, res)\nchisq = np.zeros((res,res))\n\n# loop through a 2D grid of a and b\nfor i, a_test in enumerate(a_explore):\n    for j, b_test in enumerate(b_explore):\n        chisq[i,j] = calculate_chisq(a_test, b_test)\n</pre> res = 100 a_explore = np.linspace(17,15,res) b_explore = np.linspace(-3, -1, res) chisq = np.zeros((res,res))  # loop through a 2D grid of a and b for i, a_test in enumerate(a_explore):     for j, b_test in enumerate(b_explore):         chisq[i,j] = calculate_chisq(a_test, b_test) <p>What values of $a$ and $b$ minimize our <code>chisq</code> array?</p> In\u00a0[14]: Copied! <pre># let's pull out where the chi-squared is minimized\nbest = np.argmin(chisq)\n# convert a 1D index to 2d indices\ni_best, j_best = np.unravel_index(best, chisq.shape)\n# pull out the best-fit values of a and b from the grid\na_best, b_best = a_explore[i_best], b_explore[j_best]\n# print out that best-fit\nprint(f'a={a_best:.3}, b={b_best:.3} give the lowest chi-squared and highest log(likelihood)')\n</pre> # let's pull out where the chi-squared is minimized best = np.argmin(chisq) # convert a 1D index to 2d indices i_best, j_best = np.unravel_index(best, chisq.shape) # pull out the best-fit values of a and b from the grid a_best, b_best = a_explore[i_best], b_explore[j_best] # print out that best-fit print(f'a={a_best:.3}, b={b_best:.3} give the lowest chi-squared and highest log(likelihood)') <pre>a=16.2, b=-2.03 give the lowest chi-squared and highest log(likelihood)\n</pre> In\u00a0[15]: Copied! <pre>imkw = dict(extent=[np.min(b_explore), np.max(b_explore), np.max(a_explore), np.min(a_explore)], aspect='auto', origin='lower')\nfi, ax = plt.subplots(1,2, sharex=True, sharey=True, figsize=(12,3))\n\n# imshow the log of the probability\nplt.sca(ax[0]); plt.imshow(chisq, **imkw); plt.title('$\\chi^2[p(a,b)]$')\nkw = dict(alpha=0.3, color='white')\nplt.axhline(a_best, **kw); plt.axvline(b_best, **kw);\nplt.colorbar(label='$\\chi^2[p(a,b)]$'); plt.xlabel('b (slope)'); plt.ylabel('a (intercept)')\n\n# imshow the actual probability = exp(log(probability))\nplt.sca(ax[1]); plt.imshow(np.exp(-chisq/2), **imkw); plt.title('$p(a,b)\\propto e^{-\\chi^2/2}$')\nplt.axhline(a_best, **kw); plt.axvline(b_best, **kw);\nplt.colorbar(label='$p(a,b)$');plt.xlabel('b (slope)'); plt.ylabel('a (intercept)');\n</pre> imkw = dict(extent=[np.min(b_explore), np.max(b_explore), np.max(a_explore), np.min(a_explore)], aspect='auto', origin='lower') fi, ax = plt.subplots(1,2, sharex=True, sharey=True, figsize=(12,3))  # imshow the log of the probability plt.sca(ax[0]); plt.imshow(chisq, **imkw); plt.title('$\\chi^2[p(a,b)]$') kw = dict(alpha=0.3, color='white') plt.axhline(a_best, **kw); plt.axvline(b_best, **kw); plt.colorbar(label='$\\chi^2[p(a,b)]$'); plt.xlabel('b (slope)'); plt.ylabel('a (intercept)')  # imshow the actual probability = exp(log(probability)) plt.sca(ax[1]); plt.imshow(np.exp(-chisq/2), **imkw); plt.title('$p(a,b)\\propto e^{-\\chi^2/2}$') plt.axhline(a_best, **kw); plt.axvline(b_best, **kw); plt.colorbar(label='$p(a,b)$');plt.xlabel('b (slope)'); plt.ylabel('a (intercept)'); <pre>&lt;&gt;:5: SyntaxWarning: invalid escape sequence '\\c'\n&lt;&gt;:8: SyntaxWarning: invalid escape sequence '\\c'\n&lt;&gt;:11: SyntaxWarning: invalid escape sequence '\\p'\n&lt;&gt;:5: SyntaxWarning: invalid escape sequence '\\c'\n&lt;&gt;:8: SyntaxWarning: invalid escape sequence '\\c'\n&lt;&gt;:11: SyntaxWarning: invalid escape sequence '\\p'\n/var/folders/sz/5zjhq1h17p7gsb7fr5jr1lch0000gp/T/ipykernel_73753/772915040.py:5: SyntaxWarning: invalid escape sequence '\\c'\n  plt.sca(ax[0]); plt.imshow(chisq, **imkw); plt.title('$\\chi^2[p(a,b)]$')\n/var/folders/sz/5zjhq1h17p7gsb7fr5jr1lch0000gp/T/ipykernel_73753/772915040.py:8: SyntaxWarning: invalid escape sequence '\\c'\n  plt.colorbar(label='$\\chi^2[p(a,b)]$'); plt.xlabel('b (slope)'); plt.ylabel('a (intercept)')\n/var/folders/sz/5zjhq1h17p7gsb7fr5jr1lch0000gp/T/ipykernel_73753/772915040.py:11: SyntaxWarning: invalid escape sequence '\\p'\n  plt.sca(ax[1]); plt.imshow(np.exp(-chisq/2), **imkw); plt.title('$p(a,b)\\propto e^{-\\chi^2/2}$')\n</pre> <p>The maximum likelihood values of $a$ and $b$ from our grid search seemed to give a pretty good match to the data. (Indeed, they give the best match possible, as defined by the assumptions of our model.)</p> In\u00a0[16]: Copied! <pre>plot_data_and_model(a_best, b_best)\n</pre> plot_data_and_model(a_best, b_best) <p>Note: There are much more efficient ways of finding the parameter set that minimizes $\\chi^2$ and maximizes the log of the probability, rather than this big grid search. In Python, check out the options like <code>np.polyfit</code>, <code>scipy.optimize</code>, <code>astropy.modeling</code>, or others.</p> <p>For example, let's fit a first-order polynomial (= a line) to these data using the <code>np.polyfit</code> tool. It's secretly doing some clever linear algebra to minimize $\\chi^2$ very quickly, using the magical methodology of weighted linear least squares fitting.</p> In\u00a0[17]: Copied! <pre>b_polyfit, a_polyfit = np.polyfit(log_period, magnitude, 1)\n</pre> b_polyfit, a_polyfit = np.polyfit(log_period, magnitude, 1) In\u00a0[18]: Copied! <pre>plot_data_and_model(a_polyfit, b_polyfit)\n</pre> plot_data_and_model(a_polyfit, b_polyfit) <p>In general, if you want to fit a model to some data, a good starting place is to figure out how to write down the likelihood of your data and then find the parameters that maximize that likelihood!</p>"},{"location":"concepts/chi-squared-fitting/#models-data","title":"\u270d\ufe0f\ud83e\uddee\u2764\ufe0f Models + Data\u00b6","text":"<p>We work so hard to gather sensitive observations, calibrate them carefully, and make precise measurements from them to construct reliable datasets. How do we go from those data to learning about objects or processes?</p> <p>What's the size of that planet, the distance to that supernova, the age of that cluster, the temperature of that gas? Sometimes it's one obvious measurement, but often we need to fit theoretical models to real data to find out.</p>"},{"location":"concepts/chi-squared-fitting/#the-data","title":"The Data\u00b6","text":"<p>Let's play with an historically important dataset, the 25 pulsation periods and apparent magnitudes going into the first \"Leavitt Law\" period-luminosity relationship of Cepheid variable stars (Leavitt &amp; Pickering 1912).</p>"},{"location":"concepts/chi-squared-fitting/#the-model","title":"The Model\u00b6","text":"<p>Let's start with a very simple model: a straight line. $$ y_{\\rm model}(x) = a + bx $$ The model has two parameters, $a$ for the intercept and $b$ for the slope. We can evaluate this</p>"},{"location":"concepts/chi-squared-fitting/#comparing-model-and-data","title":"Comparing Model and Data\u00b6","text":"<p>Our eyes are pretty good at figuring out what good and bad models would look like. Let's start by plotting the data and the model together, and seeing how they look.</p>"},{"location":"concepts/psfs/","title":"\ud83d\udca1\ud83d\udd2d\ud83e\udd3f Point Spread Functions","text":"In\u00a0[1]: Copied! <pre>from astr3510 import psfs\nimport astropy.units as u\n</pre> from astr3510 import psfs import astropy.units as u  <p>Let's simulate the PSF of JWST, using a (very approximate) image of what its aperture looks like.</p> In\u00a0[2]: Copied! <pre>a = psfs.JWST(wavelength=5*u.micron)\na.imshow_aperture_and_psf()\n</pre> a = psfs.JWST(wavelength=5*u.micron) a.imshow_aperture_and_psf() <p>The PSF looks very different in linear and logarithmic scalings, so it can be helpful to view it in both.</p> In\u00a0[3]: Copied! <pre>a.display_psf()\n</pre> a.display_psf() <p>Let's make a custom telescope, and see what its point spread function looks like.</p> In\u00a0[4]: Copied! <pre>a = psfs.ObscuredCircleAperture(diameter=8*u.m, obscuration_diameter=4*u.m, spiders=5, spider_width=10*u.cm)\na.imshow_aperture_and_psf()\n</pre> a = psfs.ObscuredCircleAperture(diameter=8*u.m, obscuration_diameter=4*u.m, spiders=5, spider_width=10*u.cm) a.imshow_aperture_and_psf() <p>Let's see how the same telescope design gives different PSFs at different wavelengths. (Look carefully at the axis labels!)</p> In\u00a0[5]: Copied! <pre>a = psfs.CircleAperture(diameter=1*u.m, wavelength=0.5*u.micron)\na.imshow_aperture_and_psf(zoom=10)\n</pre> a = psfs.CircleAperture(diameter=1*u.m, wavelength=0.5*u.micron) a.imshow_aperture_and_psf(zoom=10) In\u00a0[6]: Copied! <pre>a = psfs.CircleAperture(diameter=1*u.m, wavelength=50*u.micron)\na.imshow_aperture_and_psf(zoom=10)\n</pre> a = psfs.CircleAperture(diameter=1*u.m, wavelength=50*u.micron) a.imshow_aperture_and_psf(zoom=10) <p>Let's see what a PSF looks like with a Bahtinov mask in front of the telescope's aperture.</p> In\u00a0[7]: Copied! <pre>a = psfs.BahtinovAperture(diameter=0.5*u.m, wavelength=0.7*u.micron)\na.imshow_aperture_and_psf()\n</pre> a = psfs.BahtinovAperture(diameter=0.5*u.m, wavelength=0.7*u.micron) a.imshow_aperture_and_psf() <p>Let's make our own custom telescope image.</p> In\u00a0[8]: Copied! <pre>a = psfs.BitmapAperture()\na.make_aperture('hedgehog.jpg')\na.imshow_aperture_and_psf(zoom=10)\n</pre> a = psfs.BitmapAperture() a.make_aperture('hedgehog.jpg') a.imshow_aperture_and_psf(zoom=10)"},{"location":"concepts/psfs/#point-spread-functions","title":"\ud83d\udca1\ud83d\udd2d\ud83e\udd3f Point Spread Functions\u00b6","text":"<p>The point spread function (PSF) of a diffraction-limited telescope is (something like) the 2D Fourier Transform of its aperture. That's a big and complicated statement, but here we have a few tools to help play around with how differently shaped telescope apertures translate into different images they might produce.</p>"},{"location":"tools/gaia/","title":"\ud83c\udf0e\ud83d\udd6f\ud83d\uddfa Gaia Photometry","text":"In\u00a0[1]: Copied! <pre>from astropy.coordinates import SkyCoord\nimport astropy.units as u\nfrom astr3510 import get_gaia\n</pre> from astropy.coordinates import SkyCoord import astropy.units as u from astr3510 import get_gaia <p>To download some stars, specify a center and a radius, and let the function download data within that radius of that location. This will both download the star magnitudes directly measured with Gaia (<code>G_gaia</code>, <code>BP_gaia</code>, <code>RP_gaia</code>) and use color transformations to estimate the magnitudes in other common filters (<code>g_sloan</code>, <code>r_sloan</code>, <code>i_sloan</code>, <code>V_johnsoncousins</code>, <code>R_johnsoncousins</code>, <code>I_johnsoncousins</code>). With the results, you should have a decent estimate of the brightness of any star you want!</p> In\u00a0[2]: Copied! <pre>random_center = SkyCoord(ra=123.45*u.deg, dec=67.89*u.deg)\nrandom_radius = 10*u.arcmin\nrandom_stars = get_gaia(random_center, radius=random_radius)\n</pre> random_center = SkyCoord(ra=123.45*u.deg, dec=67.89*u.deg) random_radius = 10*u.arcmin random_stars = get_gaia(random_center, radius=random_radius) <pre>INFO: Query finished. [astroquery.utils.tap.core]\n</pre> In\u00a0[3]: Copied! <pre>random_stars\n</pre> random_stars Out[3]: QTable length=511 source_idradecG_gaia_magRP_gaia_magBP_gaia_magparallaxparallax_errorpmrapmra_errorpmdecpmdec_errordistance_from_centerr_sloan_magi_sloan_magg_sloan_magV_johnsoncousins_magR_johnsoncousins_magI_johnsoncousins_mag degdegmagmagmagmasmasmas / yrmas / yrmas / yrmas / yrdegmagmagmagmagmagmag int64float64float64float32float32float32float64float32float64float32float64float32float64float32float32float32float32float32float32 1096857033044992512123.4635893883863167.8897168201593120.22624778747558618.945795059204121.2798500061035162.46121394362673660.5596178770065308-1.51099444657627660.3861945867538452-0.99935816767491350.6462771296501160.00512086823937105920.5580043792724619.5646839141845722.270257949829121.20342063903808620.06756210327148418.998441696166992 1096857101765237760123.4389234304876967.895612454717521.29558181762695320.32052421569824221.499958038330078\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u20140.006996908781553126521.25285911560058620.96998596191406222.0209484100341821.56220436096191421.03382873535156220.53368377685547 1096856994390017152123.4564564126397167.8812577571630119.70782852172851618.3832263946533220.9798545837402343.05738024673824650.317930877208709711.8805332011889760.22325950860977173-7.3936758770387890.304888933897018430.0090676374498482220.24743270874023419.00759696960449222.0968360900878920.91103935241699219.62263107299804718.409908294677734 1096857067406032640123.4192933407016667.8917808319682316.63445663452148415.8524408340454117.3143138885498051.20509086728501050.048259854316711426-5.5679793261506910.03303448110818863-12.0774435103386550.047709994018077850.01169593737932267616.61594772338867216.20169639587402317.6465454101562517.032226562516.36478233337402315.734864234924316 1096858510515041408123.4757747778862667.8970084601579819.7828845977783218.7714233398437520.7744522094726560.9760725985193470.3294190466403961-0.66700593272898990.23502284288406372-5.0617867424547240.314647465944290160.01196910051884692219.92539787292480519.18999290466308621.41232872009277320.50912475585937519.55797958374023418.662395477294922 1096857754600039168123.4999972011005867.8890812859944220.95503997802734419.9273948669433621.314929962158203\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u20140.01883921490754779420.9266490936279320.5489158630371121.88910102844238321.3156127929687520.6853694915771520.090198516845703 1096858574938003200123.4678349064705467.9093604469047718.4564342498779317.44145202636718819.5562381744384771.10802679062640990.14231024682521826.3028114851229270.096838243305683142.38756809801725960.145342290401458740.02049544702774200718.65434265136718817.83787345886230520.22304534912109419.26314735412597718.2505893707275417.297353744506836 1096858574938005888123.4362340155761867.9123325610812114.92424678802490214.47485542297363315.2066574096679690.62350006074441910.021513553336262703-2.5988149952007610.015005433931946754-0.88776720112049920.0210257787257432940.02293136961316625714.9066534042358414.80163478851318415.25392150878906215.03962135314941414.71900272369384814.412050247192383 1096856277132046976123.4940523967289767.8732961505354719.94822311401367219.45656013488769520.213371276855470.83011770830961520.37824314832687380.6609149158221670.2582669258117676-3.2186123813237390.349050760269165040.0235347499676011719.92753982543945319.8131980895996120.2979469299316420.0702171325683619.73839950561523419.421058654785156 ......................................................... 1096861774690195200123.1497532684977968.0112308835022616.91623497009277316.28219795227050817.3278770446777340.20788157368998610.058080703020095825-2.8083861181753980.04185868799686432-3.62600152319071970.05446564778685570.1655389034640656616.87372779846191416.6470336914062517.5154495239257817.1303920745849616.66571998596191416.224905014038086 1096761890930958848123.2477643854126867.743001330024114.15274810791015613.55293750762939514.5895099639892582.28585153758815050.015925053507089615-5.55725994478060.010669785551726818-4.790613077188620.0152326105162501340.1656432902178423814.11050128936767613.88751888275146514.74361133575439514.3635597229003913.90317344665527313.466348648071289 1096863149079727360123.25674137285568.0389794869770116.1074962615966815.48519802093505916.57214927673340.205330207595815440.039044383913278581.1177945877121510.028735157102346420.82376063070271060.038480661809444430.1656927936690632516.06419181823730515.82050704956054716.7449474334716816.33718299865722715.8530006408691415.394023895263672 1096861637251242880123.1017038174027667.9919172402555915.04918193817138714.54620265960693415.3808517456054690.78118550574957420.0239902026951313024.127530105523770.016851527616381645-4.7184516427532520.0228925999253988270.1658282978773248415.02002429962158214.87633609771728515.46292304992675815.1931657791137714.8261852264404314.47619915008545 1096765464343757824123.0733467633423367.8041265420643715.18782424926757814.68546009063720715.5190849304199220.68384983947649680.026239233091473583.1944373242226040.01638740487396717-9.6459888624615840.0218917559832334520.165968691097600715.15876674652099615.0154685974121115.60070705413818415.33150482177734414.9649896621704114.615436553955078 1096766800076504192123.009979330451867.8772595208736216.72583389282226616.1986961364746117.0863666534423830.26740472253333260.05140516534447671.14345766731485440.036175955086946490.101674353309085030.0483952723443508150.1661528437590746616.69194602966308616.52792930603027317.1845626831054716.88599777221679716.49479675292968816.1223087310791 1096863144782865152123.2731785173438568.0425205217667820.67244720458984420.02495956420898420.8813991546630866.3296213037116030.9460204243659973-19.1496057945460760.7373940944671631-13.5462775763239791.04261648654937740.1663274681532708720.64123916625976620.48923492431640621.10454368591308620.82296180725097720.44605445861816420.08684730529785 1096761238095922816123.4268531633015767.7238593222645719.92838668823242218.7373600006103520.7585010528564451.6707236914103390.41950082778930664-1.81595425505551680.29341042041778564-6.63695285445146150.413850665092468260.166364656991092220.07931518554687519.3311634063720721.57985687255859420.66737556457519519.70634269714355518.80147933959961 1096749521425137280123.4818286340468367.7240617622617818.0188522338867217.2791137695312518.6897335052490230.5127806257118690.10643969476222992-1.5497661814438480.07013402134180069-1.33525256331274260.105648241937160490.1663670894628496217.99324798583984417.60433769226074218.97695350646972718.39076995849609417.74902153015136717.14310646057129 <p>Columns from this table can be extracted via their names.</p> In\u00a0[4]: Copied! <pre>random_stars['ra']\n</pre> random_stars['ra'] Out[4]:  $[123.46359,~123.43892,~123.45646,~\\dots,~123.27318,~123.42685,~123.48183]\\mathrm{{}^{\\circ}}$  <p>We can also specify the center by using <code>SkyCoord</code>'s ability to look up stars by common names.</p> In\u00a0[5]: Copied! <pre>some_center = SkyCoord.from_name('GJ1214')\nsome_stars = get_gaia(some_center)\n</pre> some_center = SkyCoord.from_name('GJ1214') some_stars = get_gaia(some_center) <pre>INFO: Query finished. [astroquery.utils.tap.core]\n</pre> In\u00a0[6]: Copied! <pre>some_stars\n</pre> some_stars Out[6]: QTable length=875 source_idradecG_gaia_magRP_gaia_magBP_gaia_magparallaxparallax_errorpmrapmra_errorpmdecpmdec_errordistance_from_centerr_sloan_magi_sloan_magg_sloan_magV_johnsoncousins_magR_johnsoncousins_magI_johnsoncousins_mag degdegmagmagmagmasmasmas / yrmas / yrmas / yrmas / yrdegmagmagmagmagmagmag int64float64float64float32float32float32float64float32float64float32float64float32float64float32float32float32float32float32float32 4393265392168829056258.83147998873174.96057533834274312.99678230285644511.6829118728637714.91244029998779368.298647904967040.06518708169460297580.2021523223420.059069931507110596-749.71327875850670.0467145740985870360.00421355358336060414.28170585632324212.26082420349121116.26128768920898414.84298706054687513.16494560241699211.584444046020508 4393265594029572864258.825480590225544.95967341539151519.81459808349609418.740484237670920.92361831665039-0.122019315768440590.42331802845001220.78867723195419780.38949310779571533-5.902164309885260.314400911331176760.00543666336776133720.05056190490722719.1815872192382821.66654205322265620.67265892028808619.62206649780273418.633102416992188 4393265594029578624258.83034534435984.96931879959339118.46703910827636717.84989738464355518.92687988281250.325984005974977450.14732687175273895-2.31710634646336630.13715088367462158-2.80024502715748860.110373973846435550.005595541815421249518.42387008666992218.18431472778320319.09519767761230518.69292068481445318.21346282958984417.75888442993164 4393265594029575936258.83459347581684.96535606742812619.52840614318847718.81796455383300820.0483493804931640.91959191722278790.2980462312698364-0.131051040201664080.29258519411087036-2.7806513797736470.2307530939579010.00585523924556890419.48746871948242219.18228149414062520.30350303649902319.816644668579119.2636375427246118.74053192138672 4393265598326066432258.82601663831574.96922158910412221.04161453247070319.7395229339599622.038986206054688\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\uu2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u20140.0997421634638246519.33018302917480518.1959095001220721.12858963012695319.9900455474853518.76458549499511717.611148834228516 4393269927653385472258.769722581113975.0444098007319615.4571666717529314.87687683105468815.8672704696655270.61211890388343490.03552864491939545-4.41417878680723950.033296313136816025-0.9667072383078750.0251939184963703160.0997741897528864315.4166975021362315.21233558654785216.0061511993408215.65144920349121115.21270275115966814.796011924743652 4393269687132214656258.743309384183765.01603232099432219.4287929534912118.63128471374511720.069423675537110.337991866317628450.31934872269630432.26104598216161130.3499622941017151-6.6558324563595810.26636251807212830.0999320943106757519.40684127807617219.0044155120849620.415777206420919.81447792053222719.15895843505859418.540180206298828 4393269893293365504258.758589527119745.03526519648817121.10805892944336\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u20140.09998460449950151nannannannannannan In\u00a0[7]: Copied! <pre>from astr3510 import plot_gaia\n</pre> from astr3510 import plot_gaia In\u00a0[8]: Copied! <pre>plot_gaia(some_stars)\n</pre> plot_gaia(some_stars) <p>We can change options to modify the appearance of this finder chart, including changing which filter is used to set the relative sizes of the points.</p> In\u00a0[9]: Copied! <pre>plot_gaia(some_stars, \n          filter='i_sloan',\n          faintest_magnitude_to_show=17,\n          faintest_magnitude_to_label=13,\n          size_of_zero_magnitude=200,\n          unit=u.arcsec)\n</pre> plot_gaia(some_stars,            filter='i_sloan',           faintest_magnitude_to_show=17,           faintest_magnitude_to_label=13,           size_of_zero_magnitude=200,           unit=u.arcsec) <p>With these tools, you can access a table of data and a quick visualization for any patch of the sky you care about!</p> In\u00a0[10]: Copied! <pre>cluster_center = SkyCoord.from_name(\"NGC 457\")\ncluster_stars = get_gaia(cluster_center)\nplot_gaia(cluster_stars, faintest_magnitude_to_label=10)\n</pre> cluster_center = SkyCoord.from_name(\"NGC 457\") cluster_stars = get_gaia(cluster_center) plot_gaia(cluster_stars, faintest_magnitude_to_label=10) <pre>INFO: Query finished. [astroquery.utils.tap.core]\n</pre>"},{"location":"tools/gaia/#gaia-photometry","title":"\ud83c\udf0e\ud83d\udd6f\ud83d\uddfa Gaia Photometry\u00b6","text":"<p>Often you need to know the magnitude of a star. Fortunately, the space-based Gaia survey has observed the entire sky with incredible precision; basically any star you can see with a moderate ground-based telescope has already been observed by Gaia. Common reasons you might need to download stars from Gaia would be to locate where to put apertures in an image or to use a star you observed as a flux calibrator; this page demonstrates two little tools that might be helpful for those purposes!</p>"},{"location":"tools/gaia/#downloading-gaia-data","title":"Downloading Gaia Data \ud83d\udcbe\u00b6","text":"<p>To get a table of positions and photometry, we can use the <code>get_gaia</code> function. This is a wrapper to <code>astroquery</code> and the fabulous Gaia archive, designed to be quick and easy to use.</p>"},{"location":"tools/gaia/#visualizing-gaia-data","title":"Visualizing Gaia Data \ud83c\udfa8\u00b6","text":"<p>It'd be nice to be able to see this information in a way that's not just a giant table of data. Let's use the <code>plot_gaia</code> tool to plot one of the tables we've already downloaded.</p>"}]}